{"version":3,"file":"component---src-mdx-live-splink-mdx-8d62ef0e219a7838ef6e.js","mappings":"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","sources":["webpack://robinlinacre/./src/mdx/live_splink.mdx","webpack://robinlinacre/./src/components/ObservableCells.jsx","webpack://robinlinacre/./src/components/ProbHomeNav.jsx","webpack://robinlinacre/./src/hooks/use-site-metadata.jsx","webpack://robinlinacre/./src/components/SEO.jsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport {MDXLayoutWide as MDXLayout} from \"../components/MDXLayout\";\nimport ProbHomeNav from \"../components/ProbHomeNav\";\nimport {ObservableCell, WithObservableProvider} from '../components/ObservableCells';\nimport {SEO} from \"../components/SEO\";\nimport {Link} from 'gatsby';\nexport const Head = props => React.createElement(SEO, {\n  frontmatter: props.pageContext.frontmatter\n});\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    a: \"a\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(ProbHomeNav), \"\\n\", React.createElement(_components.h1, null, \"Live DuckDB WASM Splink model\"), \"\\n\", React.createElement(_components.p, null, \"Since it's possible to run \", React.createElement(_components.a, {\n    href: \"https://duckdb.org/docs/api/wasm/overview.html\"\n  }, \"DuckDB WASM\"), \" in the browser, I thought it would be fun to try and run a Splink model in the browser.  So I made a demo of a Vite app, code \", React.createElement(_components.a, {\n    href: \"https://github.com/RobinL/vite_splink_in_browser\"\n  }, \"here\"), \".\"), \"\\n\", React.createElement(_components.p, null, \"Using \", React.createElement(_components.a, {\n    href: \"https://www.npmjs.com/package/vite-plugin-singlefile\"\n  }, React.createElement(_components.code, null, \"vite-plugin-singlefile\")), \" this entire app is bundled into a single \", React.createElement(_components.code, null, \".html\"), \" file, so no webserver is needed to host it, a user can just double click it to open.  The only external dependency is the DuckDB WASM file, which is loaded from a CDN.\"), \"\\n\", React.createElement(_components.p, null, \"You can see the app in an iFrame below.  For a better experience, open it fullscreen \", React.createElement(_components.a, {\n    href: \"https://www.robinlinacre.com/vite_splink_in_browser\"\n  }, \"here\"), \".\"), \"\\n\", React.createElement(\"iframe\", {\n    src: \"https://www.robinlinacre.com/vite_splink_in_browser\",\n    width: \"100%\",\n    height: \"1300px\",\n    style: {\n      border: 'none'\n    },\n    title: \"Live DuckDB WASM Splink model\"\n  }));\n}\nfunction MDXContent(props = {}) {\n  return React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props));\n}\nexport default MDXContent;\n","import React, {\n    useRef,\n    useEffect,\n    createContext,\n    useContext,\n    useState,\n} from 'react';\nimport { Runtime, Inspector, Library } from '@observablehq/runtime';\n\nconst ObservableRuntimeContext = createContext(null);\n\nconst mountId = 'mdx-container-div';\n\nconst stdlib = new Library();\n\nconst library = Object.assign({}, stdlib, { width: width_cells });\n\nfunction width_cells() {\n    return stdlib.Generators.observe(notify => {\n        let width1 = notify(document.getElementById(mountId).clientWidth);\n        function resized() {\n            let width2 = document.getElementById(mountId).clientWidth;\n            if (width2 !== width1) notify((width1 = width2));\n        }\n\n        window.addEventListener('resize', resized);\n        return () => window.removeEventListener('resize', resized);\n    });\n}\n\nexport function ObservableProvider({ notebook, children }) {\n    const [sharedRefs, setSharedRefs] = useState({});\n    const runtime = new Runtime(\n        Object.assign({}, new Library(), { width: width_cells })\n    );\n\n    useEffect(() => {\n        runtime.module(notebook, name => {\n            if (sharedRefs[name]) {\n                return new Inspector(sharedRefs[name]);\n            }\n        });\n        return () => runtime.dispose();\n    }, [runtime, sharedRefs, notebook]);\n\n    return (\n        <ObservableRuntimeContext.Provider value={{ setSharedRefs }}>\n            {children}\n        </ObservableRuntimeContext.Provider>\n    );\n}\n\nexport function ObservableCell({ cellName, styles, className }) {\n    const ref = useRef(null);\n    const { setSharedRefs } = useContext(ObservableRuntimeContext);\n\n    useEffect(() => {\n        setSharedRefs(prevRefs => ({ ...prevRefs, [cellName]: ref.current }));\n    }, [cellName, setSharedRefs]);\n\n    return <div ref={ref} style={styles} className={className} />;\n}\n\nexport function WithObservableProvider({ notebook, children }) {\n    return (\n        <ObservableProvider notebook={notebook}>{children}</ObservableProvider>\n    );\n}\n","import React from 'react';\nimport { Link } from 'gatsby';\n\nconst ProbHomeNav = () => {\n    return (\n        <div className=\"bg-gray-100 p-2 mt-2 mb-2 italic rounded-md text-gray-600 text-xs\">\n            <div className=\"flex justify-center items-center\">\n                <div className=\"text-center\">\n                    <span>\n                        This article is part of the&nbsp;\n                        <Link\n                            to=\"/probabilistic_linkage\"\n                            className=\"text-blue-500 hover:underline\"\n                        >\n                            probabilistic linkage training materials\n                        </Link>\n                    </span>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ProbHomeNav;\n","import { graphql, useStaticQuery } from 'gatsby';\n\nexport const useSiteMetadata = () => {\n    const data = useStaticQuery(graphql`\n        query {\n            site {\n                siteMetadata {\n                    title\n                    description\n                    twitterUsername\n                    image\n                    siteUrl\n                }\n            }\n        }\n    `);\n\n    return data.site.siteMetadata;\n};\n","import React from 'react';\nimport { useSiteMetadata } from '../hooks/use-site-metadata';\n\nexport const SEO = ({ frontmatter }) => {\n    const {\n        title: defaultTitle,\n        description: defaultDescription,\n        image,\n        siteUrl,\n        twitterUsername,\n    } = useSiteMetadata();\n\n    const seo = {\n        title: frontmatter?.title || defaultTitle,\n        description: frontmatter?.description || defaultDescription,\n        image: `${siteUrl}${frontmatter?.image || image}`,\n        url: `${siteUrl}${frontmatter?.pathname || ``}`,\n        twitterUsername,\n        ...frontmatter,\n    };\n\n    const stylesheetLink = frontmatter?.stylesheet;\n\n    return (\n        <>\n            <title>{seo.title}</title>\n            <meta name=\"description\" content={seo.description} />\n            <meta name=\"image\" content={seo.image} />\n            {stylesheetLink && (\n                <link\n                    rel=\"stylesheet\"\n                    type=\"text/css\"\n                    href={`/styles/${stylesheetLink}`}\n                />\n            )}\n        </>\n    );\n};\n"],"names":["Head","props","React","SEO","frontmatter","pageContext","_createMdxContent","_components","Object","assign","h1","p","a","code","_provideComponents","components","ProbHomeNav","href","src","width","height","style","border","title","MDXLayout","ObservableRuntimeContext","createContext","mountId","stdlib","Library","width_cells","Generators","observe","notify","width1","document","getElementById","clientWidth","resized","width2","window","addEventListener","removeEventListener","ObservableProvider","_ref","notebook","children","sharedRefs","setSharedRefs","useState","runtime","Runtime","useEffect","module","name","Inspector","dispose","Provider","value","ObservableCell","_ref2","cellName","styles","className","ref","useRef","useContext","prevRefs","current","WithObservableProvider","_ref3","Link","to","defaultTitle","description","defaultDescription","image","siteUrl","twitterUsername","useStaticQuery","site","siteMetadata","seo","url","pathname","stylesheetLink","stylesheet","content","rel","type"],"sourceRoot":""}