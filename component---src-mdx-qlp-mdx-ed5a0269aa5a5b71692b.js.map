{"version":3,"file":"component---src-mdx-qlp-mdx-ed5a0269aa5a5b71692b.js","mappings":"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","sources":["webpack://robinlinacre/./src/mdx/qlp.mdx","webpack://robinlinacre/./src/hooks/use-site-metadata.jsx","webpack://robinlinacre/./src/components/SEO.jsx","webpack://robinlinacre/./src/components/linkblog/QuoteCard.jsx","webpack://robinlinacre/./src/constants/contentTypes.js","webpack://robinlinacre/./src/components/linkblog/LinkCard.jsx","webpack://robinlinacre/./src/components/linkblog/QuotesLinks.jsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport {MDXLayout} from \"../components/MDXLayout\";\nimport {SEO} from \"../components/SEO\";\nimport {Link} from \"gatsby\";\nimport QuotesLinks from \"../components/linkblog/QuotesLinks\";\nexport const Head = props => React.createElement(SEO, {\n  frontmatter: props.pageContext.frontmatter\n});\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"Links, quotes, and podcast episodes\"), \"\\n\", React.createElement(QuotesLinks));\n}\nfunction MDXContent(props = {}) {\n  return React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props));\n}\nexport default MDXContent;\n","import { graphql, useStaticQuery } from 'gatsby';\n\nexport const useSiteMetadata = () => {\n    const data = useStaticQuery(graphql`\n        query {\n            site {\n                siteMetadata {\n                    title\n                    description\n                    twitterUsername\n                    image\n                    siteUrl\n                }\n            }\n        }\n    `);\n\n    return data.site.siteMetadata;\n};\n","import React from 'react';\nimport { useSiteMetadata } from '../hooks/use-site-metadata';\n\nexport const SEO = ({ frontmatter }) => {\n    const {\n        title: defaultTitle,\n        description: defaultDescription,\n        image,\n        siteUrl,\n        twitterUsername,\n    } = useSiteMetadata();\n\n    const seo = {\n        title: frontmatter?.title || defaultTitle,\n        description: frontmatter?.description || defaultDescription,\n        image: `${siteUrl}${frontmatter?.image || image}`,\n        url: `${siteUrl}${frontmatter?.pathname || ``}`,\n        twitterUsername,\n        ...frontmatter,\n    };\n\n    const stylesheetLink = frontmatter?.stylesheet;\n\n    return (\n        <>\n            <title>{seo.title}</title>\n            <meta name=\"description\" content={seo.description} />\n            <meta name=\"image\" content={seo.image} />\n            {stylesheetLink && (\n                <link\n                    rel=\"stylesheet\"\n                    type=\"text/css\"\n                    href={`/styles/${stylesheetLink}`}\n                />\n            )}\n        </>\n    );\n};\n","import React, { useEffect, useState } from 'react';\nimport { FaCalendar, FaQuoteLeft, FaTags } from 'react-icons/fa6';\nimport { FaUpRightFromSquare } from 'react-icons/fa6';\n\nconst formatDate = (isoDate) => {\n    if (!isoDate) return null;\n    const date = new Date(isoDate);\n    if (isNaN(date.getTime())) return isoDate;\n\n    return new Intl.DateTimeFormat('en-GB', {\n        day: '2-digit',\n        month: 'short',\n        year: 'numeric',\n        timeZone: 'UTC'\n    }).format(date);\n};\n\nconst QuoteCard = ({ frontmatter, html, onDateClick }) => {\n    const formattedDate = formatDate(frontmatter.date);\n    const originalDate = frontmatter.date;\n    const [quoteContent, setQuoteContent] = useState('');\n    const [additionalContent, setAdditionalContent] = useState('');\n\n    useEffect(() => {\n        const tempDiv = document.createElement('div');\n        tempDiv.innerHTML = html;\n\n        const blockquote = tempDiv.querySelector('blockquote');\n        setQuoteContent(blockquote ? blockquote.innerHTML : '');\n\n        blockquote?.remove();\n        setAdditionalContent(tempDiv.innerHTML.trim());\n    }, [html]);\n\n    return (\n        <div className=\"my-8\">\n            <div className=\"py-3 px-6 bg-gray-50 rounded\">\n                <div className=\"relative\">\n                    <FaQuoteLeft className=\"absolute -top-1 -left-1 text-gray-200 w-4 h-4\" />\n                    <blockquote className=\"not-italic pl-4\">\n                        <div className=\"text-gray-700 relative z-10\">\n                            <div className=\"space-y-4\" dangerouslySetInnerHTML={{ __html: quoteContent }} />\n                            <div className=\"mt-3 font-semibold text-gray-700 flex items-center gap-3\">\n                                <span>— {frontmatter.author}</span>\n                                {frontmatter.url && (\n                                    <a\n                                        href={frontmatter.url}\n                                        className=\"text-blue-600 hover:text-blue-800 inline-flex items-center text-sm font-normal\"\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                    >\n                                        <span>source</span>\n                                        <FaUpRightFromSquare className=\"ml-1 w-3 h-3\" />\n                                    </a>\n                                )}\n                            </div>\n                        </div>\n                    </blockquote>\n\n                    {additionalContent && (\n                        <div\n                            className=\"mt-4 text-gray-700 prose max-w-none\"\n                            dangerouslySetInnerHTML={{ __html: additionalContent }}\n                        />\n                    )}\n                </div>\n\n                <footer className=\"mt-4 text-sm flex items-center flex-wrap gap-4 text-gray-600 border-gray-200 pt-3\">\n                    {formattedDate && originalDate && (\n                        <div className=\"flex items-center\">\n                            <FaCalendar className=\"w-3 h-3 mr-2\" />\n                            <button\n                                onClick={() => onDateClick && onDateClick(originalDate)}\n                                className=\"hover:text-blue-600 hover:underline focus:outline-none focus:ring-1 focus:ring-blue-300 rounded px-0.5\"\n                                aria-label={`Filter by date ${formattedDate}`}\n                            >\n                                {formattedDate}\n                            </button>\n                        </div>\n                    )}\n                    {frontmatter.tags && frontmatter.tags.length > 0 && (\n                        <div className=\"flex items-center\">\n                            <FaTags className=\"w-3 h-3 mr-2\" />\n                            <div className=\"flex gap-2\">\n                                {frontmatter.tags.map((tag) => (\n                                    <span key={tag} className=\"bg-gray-200 px-2 py-0.5 rounded-full text-xs\">\n                                        {tag}\n                                    </span>\n                                ))}\n                            </div>\n                        </div>\n                    )}\n                </footer>\n            </div>\n        </div>\n    );\n};\n\nexport default QuoteCard;","export const CONTENT_TYPES = {\n    QUOTE: 'Quote',\n    LINK: 'Link',\n    PODCAST: 'Podcast'\n};","import React from 'react';\nimport { FaCalendar, FaTags } from 'react-icons/fa6';\nimport { FaUpRightFromSquare } from 'react-icons/fa6';\nimport { CONTENT_TYPES } from '../../constants/contentTypes';\n\nconst formatDate = (isoDate) => {\n    if (!isoDate) return null;\n    const date = new Date(isoDate);\n    if (isNaN(date.getTime())) return isoDate;\n\n    return new Intl.DateTimeFormat('en-GB', {\n        day: '2-digit',\n        month: 'short',\n        year: 'numeric',\n        timeZone: 'UTC'\n    }).format(date);\n};\n\n\n// Default LinkCard component\nconst LinkCard = ({ frontmatter, html, onDateClick }) => {\n    const formattedDate = formatDate(frontmatter.date);\n    const originalDate = frontmatter.date;\n\n    return (\n        <div className=\"my-8\">\n            <div className=\"py-3 px-6 bg-gray-50 rounded\">\n                <div className=\"relative\">\n                    <div className=\"text-gray-700 relative z-10\">\n                        <a\n                            href={frontmatter.url}\n                            className=\"text-blue-600 hover:text-blue-800 font-semibold text-lg inline-flex items-center\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            {frontmatter.title}\n                            <FaUpRightFromSquare className=\"ml-2 w-3 h-3\" />\n                        </a>\n                        {frontmatter.description && (\n                            <p className=\"mt-2 text-gray-600\">{frontmatter.description}</p>\n                        )}\n                        {html && (\n                            <div\n                                className=\"mt-4 text-gray-700 prose max-w-none\"\n                                dangerouslySetInnerHTML={{ __html: html }}\n                            />\n                        )}\n                    </div>\n                </div>\n\n                <footer className=\"mt-4 text-sm flex items-center flex-wrap gap-4 text-gray-600 border-gray-200 pt-3\">\n                    {formattedDate && originalDate && (\n                        <div className=\"flex items-center\">\n                            <FaCalendar className=\"w-3 h-3 mr-2\" />\n                            <button\n                                onClick={() => onDateClick && onDateClick(originalDate)}\n                                className=\"hover:text-blue-600 hover:underline focus:outline-none focus:ring-1 focus:ring-blue-300 rounded px-0.5\"\n                                aria-label={`Filter by date ${formattedDate}`}\n                            >\n                                {formattedDate}\n                            </button>\n                        </div>\n                    )}\n                    {frontmatter.tags && frontmatter.tags.length > 0 && (\n                        <div className=\"flex items-center\">\n                            <FaTags className=\"w-3 h-3 mr-2\" />\n                            <div className=\"flex gap-2\">\n                                {frontmatter.tags.map((tag) => (\n                                    <span key={tag} className=\"bg-gray-200 px-2 py-0.5 rounded-full text-xs\">\n                                        {tag}\n                                    </span>\n                                ))}\n                            </div>\n                        </div>\n                    )}\n                </footer>\n            </div>\n        </div>\n    );\n};\n\nLinkCard.contentType = CONTENT_TYPES.LINK;\nexport default LinkCard;","import React, { useState, useMemo, useEffect } from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { navigate } from 'gatsby';\nimport QuoteCard from './QuoteCard';\nimport LinkCard from './LinkCard';\n\nconst getIsoDateOnly = (dateString) => {\n  if (!dateString) return null;\n  try {\n    return dateString.substring(0, 10);\n  } catch (e) {\n    console.error(\"Error parsing date:\", dateString, e);\n    return null;\n  }\n};\n\nconst QuotesLinks = () => {\n  const [selectedTypes, setSelectedTypes] = useState(new Set(['Quote', 'Link']));\n  const [selectedTags, setSelectedTags] = useState(new Set());\n  const [selectedDate, setSelectedDate] = useState(null);\n\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n\n    const params = new URLSearchParams(window.location.search);\n    const typesParam = params.get('types');\n    const tagsParam = params.get('tags');\n    const dateParam = params.get('date');\n\n    if (typesParam) {\n      setSelectedTypes(new Set(typesParam.split(',')));\n    } else {\n      setSelectedTypes(new Set(['Quote', 'Link']));\n    }\n\n    if (tagsParam) {\n      setSelectedTags(new Set(tagsParam.split(',')));\n    } else {\n      setSelectedTags(new Set());\n    }\n\n    if (dateParam && /^\\d{4}-\\d{2}-\\d{2}$/.test(dateParam)) {\n      setSelectedDate(dateParam);\n    } else {\n      setSelectedDate(null);\n    }\n  }, []);\n\n  const updateURL = (types, tags, date) => {\n    if (typeof window === 'undefined') return;\n\n    const params = new URLSearchParams();\n\n    if (!(types.has('Quote') && types.has('Link'))) {\n      if (types.size > 0) {\n        params.set('types', Array.from(types).join(','));\n      }\n    }\n\n    if (tags.size > 0) {\n      params.set('tags', Array.from(tags).join(','));\n    }\n\n    if (date) {\n      params.set('date', date);\n    }\n\n    const search = params.toString();\n    navigate(\n      `${window.location.pathname}${search ? '?' + search : ''}`,\n      { replace: true }\n    );\n  };\n\n  const data = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark(\n        filter: { fileAbsolutePath: { regex: \"/links_quotes_markdown/\" } }\n        sort: { frontmatter: { date: DESC } }\n      ) {\n        nodes {\n          html\n          frontmatter {\n            type\n            title\n            author\n            url\n            date\n            tags\n          }\n        }\n      }\n    }\n  `);\n\n  const allTags = useMemo(() => {\n    const tags = new Set();\n    data.allMarkdownRemark.nodes.forEach(node => {\n      if (node.frontmatter.tags) {\n        node.frontmatter.tags.forEach(tag => tags.add(tag));\n      }\n    });\n    return Array.from(tags).sort();\n  }, [data]);\n\n  const toggleType = (type) => {\n    setSelectedTypes(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(type)) {\n        newSet.delete(type);\n      } else {\n        newSet.add(type);\n      }\n      if (newSet.size === 0) {\n        newSet.add(type);\n      }\n      updateURL(newSet, selectedTags, selectedDate);\n      return newSet;\n    });\n  };\n\n  const toggleTag = (tag) => {\n    setSelectedTags(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(tag)) {\n        newSet.delete(tag);\n      } else {\n        newSet.add(tag);\n      }\n      updateURL(selectedTypes, newSet, selectedDate);\n      return newSet;\n    });\n  };\n\n  const selectDate = (date) => {\n    const newDate = date ? getIsoDateOnly(date) : null;\n    setSelectedDate(newDate);\n    updateURL(selectedTypes, selectedTags, newDate);\n  };\n\n  const renderContent = (node) => {\n    const cardProps = {\n      frontmatter: node.frontmatter,\n      html: node.html,\n      onDateClick: selectDate\n    };\n\n    switch (node.frontmatter.type) {\n      case 'quote':\n        return <QuoteCard {...cardProps} />;\n      case 'link':\n        return <LinkCard {...cardProps} />;\n      default:\n        return null;\n    }\n  };\n\n  const filteredNodes = data.allMarkdownRemark.nodes.filter(node => {\n    if (!node.frontmatter || !node.frontmatter.type) return false;\n\n    const typeMatches = selectedTypes.has(node.frontmatter.type.charAt(0).toUpperCase() + node.frontmatter.type.slice(1));\n\n    const tagMatches = selectedTags.size === 0 ||\n      (node.frontmatter.tags && node.frontmatter.tags.some(tag => selectedTags.has(tag)));\n\n    const nodeDateOnly = getIsoDateOnly(node.frontmatter.date);\n    const dateMatches = !selectedDate || (nodeDateOnly === selectedDate);\n\n    return typeMatches && tagMatches && dateMatches;\n  });\n\n  return (\n    <div className=\"max-w-3xl mx-auto\">\n      <div className=\"mb-6 space-y-4\">\n        <div className=\"flex gap-2 items-center\">\n          <span className=\"text-sm font-medium text-gray-600 mr-2\">Type:</span>\n          {['Quote', 'Link'].map(type => (\n            <button\n              key={type}\n              onClick={() => toggleType(type)}\n              className={`px-3 py-1 text-sm rounded-full border transition-colors duration-150 ease-in-out\n                ${selectedTypes.has(type)\n                  ? 'bg-blue-500 text-white border-blue-500'\n                  : 'bg-white text-gray-600 border-gray-300 hover:border-blue-400 hover:text-blue-600'\n                }`}\n            >\n              {type}s\n            </button>\n          ))}\n        </div>\n\n        {allTags.length > 0 && (\n          <div className=\"flex gap-2 flex-wrap items-center\">\n            <span className=\"text-sm font-medium text-gray-600 mr-2\">Tags:</span>\n            {allTags.map(tag => (\n              <button\n                key={tag}\n                onClick={() => toggleTag(tag)}\n                className={`px-3 py-1 text-sm rounded-full border transition-colors duration-150 ease-in-out\n                  ${selectedTags.has(tag)\n                    ? 'bg-green-500 text-white border-green-500'\n                    : 'bg-white text-gray-600 border-gray-300 hover:border-green-400 hover:text-green-600'\n                  }`}\n              >\n                {tag}\n              </button>\n            ))}\n          </div>\n        )}\n\n        {selectedDate && (\n          <div className=\"flex gap-2 items-center p-2 bg-yellow-100 border border-yellow-300 rounded\">\n            <span className=\"text-sm font-medium text-yellow-800\">\n              Filtering by date: {selectedDate}\n            </span>\n            <button\n              onClick={() => selectDate(null)}\n              className=\"ml-auto px-2 py-0.5 text-xs rounded border bg-white text-gray-600 border-gray-300 hover:bg-gray-100\"\n            >\n              Clear Date\n            </button>\n          </div>\n        )}\n      </div>\n\n      {filteredNodes.length > 0 ? (\n        filteredNodes.map((node, index) => (\n          <div key={index}>\n            {renderContent(node)}\n          </div>\n        ))\n      ) : (\n        <p className=\"text-center text-gray-500 mt-8\">No items match the current filters.</p>\n      )}\n    </div>\n  );\n};\n\nexport default QuotesLinks;"],"names":["Head","props","React","SEO","frontmatter","pageContext","_createMdxContent","_components","Object","assign","h1","_provideComponents","components","QuotesLinks","MDXLayout","_ref","title","defaultTitle","description","defaultDescription","image","siteUrl","twitterUsername","useStaticQuery","site","siteMetadata","seo","url","pathname","stylesheetLink","stylesheet","name","content","rel","type","href","html","onDateClick","formattedDate","isoDate","date","Date","isNaN","getTime","Intl","DateTimeFormat","day","month","year","timeZone","format","formatDate","originalDate","quoteContent","setQuoteContent","useState","additionalContent","setAdditionalContent","useEffect","tempDiv","document","createElement","innerHTML","blockquote","querySelector","remove","trim","className","FaQuoteLeft","dangerouslySetInnerHTML","__html","author","target","FaUpRightFromSquare","FaCalendar","onClick","tags","length","FaTags","map","tag","key","LinkCard","contentType","getIsoDateOnly","dateString","substring","e","console","error","selectedTypes","setSelectedTypes","Set","selectedTags","setSelectedTags","selectedDate","setSelectedDate","window","params","URLSearchParams","location","search","typesParam","get","tagsParam","dateParam","split","test","updateURL","types","has","size","set","Array","from","join","toString","navigate","replace","data","allTags","useMemo","allMarkdownRemark","nodes","forEach","node","add","sort","selectDate","newDate","filteredNodes","filter","typeMatches","charAt","toUpperCase","slice","tagMatches","some","nodeDateOnly","prev","newSet","delete","toggleType","toggleTag","index","cardProps","QuoteCard","renderContent"],"sourceRoot":""}