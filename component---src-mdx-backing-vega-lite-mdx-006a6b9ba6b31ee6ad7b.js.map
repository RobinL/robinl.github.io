{"version":3,"file":"component---src-mdx-backing-vega-lite-mdx-006a6b9ba6b31ee6ad7b.js","mappings":"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","sources":["webpack://robinlinacre/./src/mdx/backing_vega_lite.mdx","webpack://robinlinacre/./src/hooks/use-site-metadata.jsx","webpack://robinlinacre/./src/components/SEO.jsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport {MDXLayout} from \"../components/MDXLayout\";\nimport {SEO} from \"../components/SEO\";\nexport const Head = props => React.createElement(SEO, {\n  frontmatter: props.pageContext.frontmatter\n});\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    strong: \"strong\",\n    a: \"a\",\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"Why I’m backing Vega-Lite as our default tool for data visualisation\"), \"\\n\", React.createElement(_components.p, null, \"The range of data visualisation tools available to data scientists is vast¹. If they’re anything like me, beginner data scientists often don’t put too much thought into which tool to learn — and often just pick a tool on the basis of some impressive outputs they’ve seen online.\"), \"\\n\", React.createElement(_components.p, null, \"On any given team, there will tend to be a range of personal favourites. This inconsistency imposes a cost on the team in two ways:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"Data visualisation tools can take months to master, so a range of tools makes it harder to collaborate and share work, and harder to maintain codebases.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"Not all tools are equal. The quality of tools varies in their flexibility, the quality of their APIs, and the quality of the data visualisation they produce.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"As a result, it makes sense for teams to spend time choosing a ‘sensible default’, and stick with it in most circumstances. I think Vega-Lite is the right choice for standardisation, for the following reasons²:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Consistent, disciplined API underpinned by well-designed grammar of graphics.\"), \" Data visualisation is the process of mapping different elements of a dataset to visual encodings such as positions on the x and y axes, colours, or sizes. I’ve never seen this more clearly expressed than in the Vega-Lite API. This makes the API extremely predictable, and easy to understand.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Easily editable charts with embedded data.\"), \" Vega-Lite embeds data directly in the chart, enabling anyone with access to modify the visualization in their web browswer using the \", React.createElement(_components.a, {\n    href: \"https://vega.github.io/editor/\"\n  }, \"Vega-Lite editor\"), \", without needing to request access to the data or how the chart was generated.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Founded on academic research.\"), \" Vega-Lite is a product of the\", React.createElement(_components.a, {\n    href: \"http://idl.cs.washington.edu/\"\n  }, \" UW Interactive Data Lab\"), \", one of the leading academic centres for data visualisation. It’s heavily informed by research on visual perception and how to convey data visually as accurately as possible. \", React.createElement(_components.a, {\n    href: \"https://www.youtube.com/watch?v=vc1bq0qIKoA\"\n  }, \"This\"), \" is a great video intro to some of this research³.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Advanced interactivity.\"), \" Vega-Lite provides the most powerful declarative system I’ve seen for advanced interactivity between charts — such as \", React.createElement(_components.a, {\n    href: \"https://vega.github.io/vega-lite/examples/interactive_seattle_weather.html\"\n  }, \"brushing one chart to filter the data displayed in another one\"), \".\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Language agnostic.\"), \" Vega-Lite charts are fully specified by a declarative .json based syntax. You can build Vega Lite charts by \", React.createElement(_components.a, {\n    href: \"https://vega.github.io/editor/#/\"\n  }, \"writing raw json,\"), \" from Python (using \", React.createElement(_components.a, {\n    href: \"https://altair-viz.github.io/\"\n  }, \"Altair\"), \"), from R (using the\", React.createElement(_components.a, {\n    href: \"https://github.com/vegawidget/altair\"\n  }, \" R interface to Altair\"), \"), and from \", React.createElement(_components.a, {\n    href: \"https://github.com/fredo-dedup/VegaLite.jl\"\n  }, \"Julia\"), \".\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, React.createElement(_components.a, {\n    href: \"https://vega.github.io/vega-lite/examples/\"\n  }, \"Looks great\")), \". Good data visualisation can never be purely theoretical — an interesting visualisation which ‘breaks’ the rules can be more compelling than something more grounded in theory that looks boring or outdated. Vega-Lite \", React.createElement(_components.a, {\n    href: \"https://vega.github.io/vega-lite/examples/\"\n  }, \"looks modern and slick\"), \" using the default settings, and is also \", React.createElement(_components.a, {\n    href: \"https://beta.observablehq.com/@domoritz/vega-themes-demo\"\n  }, \"themable\"), \".\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Coherent ‘escape valves’ when Vega-Lite is not sufficiently flexible.\"), \" Visualisation libraries involve a trade off between flexibility and ease of use. With most libraries, there are some customisations or chart types which are simply not possible, and the user has to resort to a learning a completely different tool (e.g. d3.js) to achieve their goals. Vega-Lite is is part of a more coherent set of abstractions. Users can fall back on the more verbose, but more customisable Vega syntax when Vega-Lite is not sufficient, and Vega will be instantly familiar. And both Vega and Vega-Lite share a range of core concepts with d3.js (an imperative language), which gives essentially unlimited flexibility. Coming to Vega-Lite from d3.js, I found that it immediately ‘made sense’ because of these shared concepts.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Web-enabled by default, and easy to host.\"), \" It is trivial to embed \", React.createElement(_components.a, {\n    href: \"https://github.com/vega/vega-embed\"\n  }, \"Vega-Lite into any website\"), \", which can then be hosted on a static web host because data processing and interaction is all dealt with by the front-end. The ease of embedding charts has resulted in it being adopted within a number of high profile websites and tools, such as \", React.createElement(_components.a, {\n    href: \"https://en.wikipedia.org/wiki/Wikipedia:Graphs_and_charts#Vega\"\n  }, \"Wikipedia\"), \" and \", React.createElement(_components.a, {\n    href: \"https://www.elastic.co/guide/en/kibana/current/vega-graph.html\"\n  }, \"Kibana\"), \". If you need to embed graphics elsewhere, you can convert them into a svg or \", React.createElement(_components.a, {\n    href: \"https://vega.github.io/vega/usage/\"\n  }, \"high resolution png.\")), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Vega-Lite charts are easy to incorporate into more complex webapps.\"), \" Vega View provides hooks so that Vega-Lite charts can be \", React.createElement(_components.a, {\n    href: \"https://beta.observablehq.com/@domoritz/reactive-vega-lite\"\n  }, \"modified by external events\"), \", and also means that charts can \", React.createElement(_components.a, {\n    href: \"https://beta.observablehq.com/@mbostock/observing-vega-signals\"\n  }, \"expose events to other parts of the website\"), \". This means that user interaction with a chart can drive the behaviour of other parts of your website.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"GUIs and other spec generation tools.\"), \" \", React.createElement(_components.a, {\n    href: \"http://vega.github.io/voyager/\"\n  }, \"Voyager2\"), \" is visualisation recommendation tool which will allow the user to build specs using point-and-click, or will automatically build a range of Vega charts based on a dataset. \", React.createElement(_components.a, {\n    href: \"http://idl.cs.washington.edu/papers/draco/\"\n  }, \"Draco\"), \" is a cutting edge visualisation recommendation tool that won the InfoVis 2018 Best Paper Award, that suggests specs based optimising ease of visual perception. \", React.createElement(_components.a, {\n    href: \"http://idl.cs.washington.edu/papers/lyra/\"\n  }, \"Lyra\"), \" provide a GUI in which users can create heavily customised charts using point-and-click drawing tools.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Built into key data science tools by default.\"), \" A Vega-Lite viewer is built into Jupyterlab by default. Voyager can be installed into JupyterLab as an \", React.createElement(_components.a, {\n    href: \"https://github.com/altair-viz/jupyterlab_voyager\"\n  }, \"extension\"), \", enabling datasets to be opened in Voyager. Pandas dataframes can be extended to support \", React.createElement(_components.a, {\n    href: \"https://github.com/jakevdp/pdvega\"\n  }, \"auto-generation of vega charts\"), \". JupyterLab looks set to become the most popular development environment for data scientists, so Vega’s popularity looks set to continue growing.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Reactive dataflows and strong separation of concerns result in high performance.\"), \" Vega-Lite is underpinned by a sophisticated engine that is aware of what needs to be re-computed when inputs change or in reaction to other events. This eliminates unnecessary code execution. More generally, there is a strong separation of concerns between the specification and its evaluation, enabling iterative performance enhancement behind the scenes. More details are \", React.createElement(_components.a, {\n    href: \"https://beta.observablehq.com/@jheer/how-vega-works\"\n  }, \"here\"), \".\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Free and open source.\"), \" You can find the main Vega-Lite codebase \", React.createElement(_components.a, {\n    href: \"https://github.com/vega/vega-lite\"\n  }, \"here\"), \".\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"How to get started\"), \"\\n\", React.createElement(_components.p, null, \"The Vega-Lite docs have a good \", React.createElement(_components.a, {\n    href: \"https://vega.github.io/vega-lite/tutorials/getting_started.html\"\n  }, \"getting started tutorial\"), \".\"), \"\\n\", React.createElement(_components.p, null, \"If you’re a Python user, I recommend Altair to write your Vega-Lite specs. Jake VanderPlas is the author of Altair, and ran an \", React.createElement(_components.a, {\n    href: \"https://www.youtube.com/watch?v=ms29ZPUKxbU\"\n  }, \"excellent tutorial \"), \"at Pycon 2018.\"), \"\\n\", React.createElement(_components.p, null, \"For further details, the Vega-Lite team did a \", React.createElement(_components.a, {\n    href: \"https://www.youtube.com/watch?v=9uaHRWj04D4&t=18s\"\n  }, \"great talk at OpenVis 2017\"), \", and there is another more in depth talk by the team \", React.createElement(_components.a, {\n    href: \"https://www.youtube.com/watch?v=Nsrz4YdaZ_A\"\n  }, \"here\"), \".\"), \"\\n\", React.createElement(_components.p, null, \"Jupyter users who just want to get their feet wet can try \", React.createElement(_components.a, {\n    href: \"https://github.com/altair-viz/pdvega\"\n  }, \"pdvega\"), \".\"), \"\\n\", React.createElement(_components.h3, null, \"Endnotes\"), \"\\n\", React.createElement(_components.p, null, \"¹ For a sense of the scale of the landscape, see \", React.createElement(_components.a, {\n    href: \"https://github.com/rougier/python-visualization-landscape\"\n  }, \"here\"), \" for a graphic showing just the Python part.\"), \"\\n\", React.createElement(_components.p, null, \"² I have come to this conclusion after working with quite a wide range of highly-recommended (and very good) tools, including matplotlib, ggplot2, d3.js, highcharts, ggivs, Vega, Vega-Lite and plotly.\"), \"\\n\", React.createElement(_components.p, null, \"³ These influences run deep. The defaults built into vega-lite are carefully thought out, and grounded in research. For instance, how much does a typical data scientist think about which colour scales to use? This is actually the subject of\", React.createElement(_components.a, {\n    href: \"https://idl.cs.washington.edu/files/2018-QuantitativeColor-CHI.pdf\"\n  }, \" rigorous academic studies\"), \" — and the best ones are the defaults which are built into Vega-Lite.\"));\n}\nfunction MDXContent(props = {}) {\n  return React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props));\n}\nexport default MDXContent;\n","import { graphql, useStaticQuery } from 'gatsby';\n\nexport const useSiteMetadata = () => {\n    const data = useStaticQuery(graphql`\n        query {\n            site {\n                siteMetadata {\n                    title\n                    description\n                    twitterUsername\n                    image\n                    siteUrl\n                }\n            }\n        }\n    `);\n\n    return data.site.siteMetadata;\n};\n","import React from 'react';\nimport { useSiteMetadata } from '../hooks/use-site-metadata';\n\nexport const SEO = ({ frontmatter }) => {\n    const {\n        title: defaultTitle,\n        description: defaultDescription,\n        image,\n        siteUrl,\n        twitterUsername,\n    } = useSiteMetadata();\n\n    const seo = {\n        title: frontmatter?.title || defaultTitle,\n        description: frontmatter?.description || defaultDescription,\n        image: `${siteUrl}${frontmatter?.image || image}`,\n        url: `${siteUrl}${frontmatter?.pathname || ``}`,\n        twitterUsername,\n        ...frontmatter,\n    };\n\n    const stylesheetLink = frontmatter?.stylesheet;\n\n    return (\n        <>\n            <title>{seo.title}</title>\n            <meta name=\"description\" content={seo.description} />\n            <meta name=\"image\" content={seo.image} />\n            {stylesheetLink && (\n                <link\n                    rel=\"stylesheet\"\n                    type=\"text/css\"\n                    href={`/styles/${stylesheetLink}`}\n                />\n            )}\n        </>\n    );\n};\n"],"names":["Head","props","React","SEO","frontmatter","pageContext","_createMdxContent","_components","Object","assign","h1","p","ul","li","strong","a","h2","h3","_provideComponents","components","href","MDXLayout","_ref","title","defaultTitle","description","defaultDescription","image","siteUrl","twitterUsername","useStaticQuery","site","siteMetadata","seo","url","pathname","stylesheetLink","stylesheet","name","content","rel","type"],"sourceRoot":""}