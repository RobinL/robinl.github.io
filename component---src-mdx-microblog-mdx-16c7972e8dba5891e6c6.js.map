{"version":3,"file":"component---src-mdx-microblog-mdx-16c7972e8dba5891e6c6.js","mappings":"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","sources":["webpack://robinlinacre/./src/components/mblog/MicroblogCard.jsx","webpack://robinlinacre/./src/components/mblog/Microblogs.jsx","webpack://robinlinacre/./src/mdx/microblog.mdx","webpack://robinlinacre/./src/hooks/use-site-metadata.jsx","webpack://robinlinacre/./src/components/SEO.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport { FaCalendar, FaTags } from 'react-icons/fa6';\nimport CodeBlock from '../CodeBlock';\nimport { createRoot } from 'react-dom/client'; // Add this import\n\n// Helper function to generate slugs\nconst slugify = (str) => {\n    if (!str) return '';\n    return String(str)\n        .toLowerCase()\n        .replace(/\\s+/g, '-') // Replace spaces with -\n        .replace(/[^\\w-]+/g, '') // Remove all non-word chars\n        .replace(/--+/g, '-') // Replace multiple - with single -\n        .replace(/^-+/, '') // Trim - from start of text\n        .replace(/-+$/, ''); // Trim - from end of text\n};\n\nconst formatDate = (isoDate) => {\n    if (!isoDate) return null;\n    const date = new Date(isoDate);\n    if (isNaN(date.getTime())) return isoDate;\n\n    return new Intl.DateTimeFormat('en-GB', {\n        day: '2-digit',\n        month: 'short',\n        year: 'numeric',\n        timeZone: 'UTC'\n    }).format(date);\n};\n\n// Function to process HTML and extract code blocks\nconst processHtmlWithCodeBlocks = (html) => {\n    if (typeof window === 'undefined' || !html) return { processedHtml: html, codeBlocks: [] };\n\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(html, 'text/html');\n    const codeBlocks = [];\n\n    // Find all pre > code elements (standard markdown code block format)\n    const preCodeElements = doc.querySelectorAll('pre > code');\n\n    preCodeElements.forEach((codeElement, index) => {\n        // Get language class from code element\n        const languageClass = Array.from(codeElement.classList).find(cls =>\n            cls.startsWith('language-')\n        );\n\n        // Extract the code content\n        const code = codeElement.textContent;\n\n        // Add a placeholder where the code block should be rendered\n        const placeholder = document.createElement('div');\n        placeholder.setAttribute('data-code-block-id', index);\n        codeElement.parentElement.replaceWith(placeholder);\n\n        // Store code block data for later rendering\n        codeBlocks.push({\n            id: index,\n            code,\n            language: languageClass || 'language-text'\n        });\n    });\n\n    return {\n        processedHtml: doc.body.innerHTML,\n        codeBlocks\n    };\n};\n\nconst MicroblogCard = ({ frontmatter, html }) => {\n    const formattedDate = formatDate(frontmatter.date);\n    const [processedContent, setProcessedContent] = useState({ processedHtml: html, codeBlocks: [] });\n    const contentRef = useRef(null);\n\n    // Generate slug from title or date as fallback\n    const postSlug = slugify(frontmatter.title || frontmatter.date || '');\n\n    useEffect(() => {\n        const result = processHtmlWithCodeBlocks(html);\n        setProcessedContent(result);\n    }, [html]);\n\n    useEffect(() => {\n        if (!contentRef.current) return;\n\n        const placeholders = contentRef.current.querySelectorAll('[data-code-block-id]');\n\n        placeholders.forEach(placeholder => {\n            const blockId = parseInt(placeholder.getAttribute('data-code-block-id'), 10);\n            const codeBlock = processedContent.codeBlocks.find(block => block.id === blockId);\n\n            if (codeBlock) {\n                const wrapper = document.createElement('div');\n                wrapper.className = 'my-4';\n\n                const root = createRoot(wrapper);\n                root.render(\n                    <CodeBlock className={codeBlock.language}>\n                        {codeBlock.code}\n                    </CodeBlock>\n                );\n\n                placeholder.replaceWith(wrapper);\n            }\n        });\n    }, [processedContent, contentRef.current]);\n\n    return (\n        <div className=\"my-8\" id={postSlug}>\n            <article className=\"py-4 px-6 bg-gray-50 rounded shadow-sm\">\n                {frontmatter.title && (\n                    <h3 className=\"text-xl font-semibold text-gray-800 mb-2\">\n                        <a href={`#${postSlug}`} className=\"text-inherit hover:underline focus:underline focus:outline-none\">\n                            {frontmatter.title}\n                        </a>\n                    </h3>\n                )}\n                <div className=\"text-gray-700 mb-4\">\n                    <div\n                        ref={contentRef}\n                        className=\"space-y-4 prose max-w-none\"\n                        dangerouslySetInnerHTML={{ __html: processedContent.processedHtml }}\n                    />\n                </div>\n                <footer className=\"text-sm flex items-center flex-wrap gap-4 text-gray-600\">\n                    {formattedDate && (\n                        <div className=\"flex items-center\">\n                            <FaCalendar className=\"w-3 h-3 mr-2\" />\n                            <span>{formattedDate}</span>\n                        </div>\n                    )}\n                    {frontmatter.tags && frontmatter.tags.length > 0 && (\n                        <div className=\"flex items-center\">\n                            <FaTags className=\"w-3 h-3 mr-2\" />\n                            <div className=\"flex gap-2\">\n                                {frontmatter.tags.map((tag) => (\n                                    <span key={tag} className=\"bg-gray-200 px-2 py-0.5 rounded-full text-xs\">\n                                        {tag}\n                                    </span>\n                                ))}\n                            </div>\n                        </div>\n                    )}\n                </footer>\n            </article>\n        </div>\n    );\n};\n\nexport default MicroblogCard;","import React, { useState, useMemo, useEffect } from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { navigate } from 'gatsby';\nimport MicroblogCard from './MicroblogCard';\n\n// Helper function to generate slugs\nconst slugify = (str) => {\n    if (!str) return '';\n    return String(str)\n        .toLowerCase()\n        .replace(/\\s+/g, '-') // Replace spaces with -\n        .replace(/[^\\w-]+/g, '') // Remove all non-word chars\n        .replace(/--+/g, '-') // Replace multiple - with single -\n        .replace(/^-+/, '') // Trim - from start of text\n        .replace(/-+$/, ''); // Trim - from end of text\n};\n\nconst Microblogs = () => {\n    const [selectedTags, setSelectedTags] = useState(new Set());\n\n    // Parse URL params on component mount and when URL changes\n    useEffect(() => {\n        if (typeof window === 'undefined') return;\n\n        const params = new URLSearchParams(window.location.search);\n        const tagsParam = params.get('tags');\n\n        if (tagsParam) {\n            setSelectedTags(new Set(tagsParam.split(',')));\n        }\n    }, []);\n\n    // Update URL when filters change\n    const updateURL = (tags) => {\n        if (typeof window === 'undefined') return;\n\n        const params = new URLSearchParams();\n\n        if (tags.size > 0) {\n            params.set('tags', Array.from(tags).join(','));\n        }\n\n        const search = params.toString();\n        navigate(\n            `${window.location.pathname}${search ? '?' + search : ''}`,\n            { replace: true }\n        );\n    };\n\n    const data = useStaticQuery(graphql`\n        query {\n            allMarkdownRemark(\n                filter: { fileAbsolutePath: { regex: \"/microblog_md/\" } }\n                sort: { frontmatter: { date: DESC } }\n            ) {\n                nodes {\n                    html\n                    frontmatter {\n                        title\n                        date\n                        tags\n                    }\n                }\n            }\n        }\n    `);\n\n    // Get unique tags from all nodes\n    const allTags = useMemo(() => {\n        const tags = new Set();\n        data.allMarkdownRemark.nodes.forEach(node => {\n            if (node.frontmatter.tags) {\n                node.frontmatter.tags.forEach(tag => tags.add(tag));\n            }\n        });\n        return Array.from(tags).sort();\n    }, [data]);\n\n    const toggleTag = (tag) => {\n        setSelectedTags(prev => {\n            const newSet = new Set(prev);\n            if (newSet.has(tag)) {\n                newSet.delete(tag);\n            } else {\n                newSet.add(tag);\n            }\n            updateURL(newSet);\n            return newSet;\n        });\n    };\n\n    const filteredNodes = data.allMarkdownRemark.nodes.filter(node => {\n        return selectedTags.size === 0 ||\n            (node.frontmatter.tags && node.frontmatter.tags.some(tag => selectedTags.has(tag)));\n    });\n\n    return (\n        <div className=\"max-w-3xl mx-auto\">\n            {/* Tag filters */}\n            <div className=\"mb-6\">\n                <div className=\"flex gap-2 flex-wrap\">\n                    {allTags.map(tag => (\n                        <button\n                            key={tag}\n                            onClick={() => toggleTag(tag)}\n                            className={`px-3 py-1 text-sm rounded-full border transition-colors\n                                ${selectedTags.has(tag)\n                                    ? 'bg-green-500 text-white border-green-500'\n                                    : 'bg-white text-gray-600 border-gray-300 hover:border-green-500'\n                                }`}\n                        >\n                            {tag}\n                        </button>\n                    ))}\n                </div>\n            </div>\n\n            {filteredNodes.map((node, index) => {\n                const postSlug = slugify(node.frontmatter.title || node.frontmatter.date || '');\n                return (\n                    <div key={index} id={postSlug} className=\"my-8\">\n                        <MicroblogCard\n                            frontmatter={node.frontmatter}\n                            html={node.html}\n                        />\n                    </div>\n                );\n            })}\n        </div>\n    );\n};\n\nexport default Microblogs;","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport {MDXLayout} from \"../components/MDXLayout\";\nimport {SEO} from \"../components/SEO\";\nimport Microblogs from \"../components/mblog/Microblogs\";\nexport const Head = props => React.createElement(SEO, {\n  frontmatter: props.pageContext.frontmatter\n});\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"Microblog\"), \"\\n\", React.createElement(Microblogs));\n}\nfunction MDXContent(props = {}) {\n  return React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props));\n}\nexport default MDXContent;\n","import { graphql, useStaticQuery } from 'gatsby';\n\nexport const useSiteMetadata = () => {\n    const data = useStaticQuery(graphql`\n        query {\n            site {\n                siteMetadata {\n                    title\n                    description\n                    twitterUsername\n                    image\n                    siteUrl\n                }\n            }\n        }\n    `);\n\n    return data.site.siteMetadata;\n};\n","import React from 'react';\nimport { useSiteMetadata } from '../hooks/use-site-metadata';\n\nexport const SEO = ({ frontmatter }) => {\n    const {\n        title: defaultTitle,\n        description: defaultDescription,\n        image,\n        siteUrl,\n        twitterUsername,\n    } = useSiteMetadata();\n\n    const seo = {\n        title: frontmatter?.title || defaultTitle,\n        description: frontmatter?.description || defaultDescription,\n        image: `${siteUrl}${frontmatter?.image || image}`,\n        url: `${siteUrl}${frontmatter?.pathname || ``}`,\n        twitterUsername,\n        ...frontmatter,\n    };\n\n    const stylesheetLink = frontmatter?.stylesheet;\n\n    return (\n        <>\n            <title>{seo.title}</title>\n            <meta name=\"description\" content={seo.description} />\n            <meta name=\"image\" content={seo.image} />\n            {stylesheetLink && (\n                <link\n                    rel=\"stylesheet\"\n                    type=\"text/css\"\n                    href={`/styles/${stylesheetLink}`}\n                />\n            )}\n        </>\n    );\n};\n"],"names":["_ref","frontmatter","html","formattedDate","isoDate","date","Date","isNaN","getTime","Intl","DateTimeFormat","day","month","year","timeZone","format","formatDate","processedContent","setProcessedContent","useState","processedHtml","codeBlocks","contentRef","useRef","postSlug","str","title","String","toLowerCase","replace","useEffect","result","window","doc","DOMParser","parseFromString","querySelectorAll","forEach","codeElement","index","languageClass","Array","from","classList","find","cls","startsWith","code","textContent","placeholder","document","createElement","setAttribute","parentElement","replaceWith","push","id","language","body","innerHTML","processHtmlWithCodeBlocks","current","blockId","parseInt","getAttribute","codeBlock","block","wrapper","className","createRoot","render","React","CodeBlock","href","ref","dangerouslySetInnerHTML","__html","FaCalendar","tags","length","FaTags","map","tag","key","Microblogs","selectedTags","setSelectedTags","Set","tagsParam","URLSearchParams","location","search","get","split","data","useStaticQuery","allTags","useMemo","allMarkdownRemark","nodes","node","add","sort","toggleTag","prev","newSet","has","delete","params","size","set","join","toString","navigate","pathname","updateURL","filteredNodes","filter","some","onClick","MicroblogCard","Head","props","SEO","pageContext","_createMdxContent","_components","Object","assign","h1","_provideComponents","components","MDXLayout","defaultTitle","description","defaultDescription","image","siteUrl","twitterUsername","site","siteMetadata","seo","url","stylesheetLink","stylesheet","name","content","rel","type"],"sourceRoot":""}