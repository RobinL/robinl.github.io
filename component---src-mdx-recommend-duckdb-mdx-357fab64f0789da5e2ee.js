"use strict";(self.webpackChunkrobinlinacre=self.webpackChunkrobinlinacre||[]).push([[6909],{2671:function(e,t,n){n.r(t),n.d(t,{Head:function(){return i}});var a=n(1151),l=n(7294),r=n(7848),o=n(7825),s=n(4160);const i=e=>l.createElement(o.H,{frontmatter:e.pageContext.frontmatter});function c(e){const t=Object.assign({h1:"h1",p:"p",sup:"sup",a:"a",ul:"ul",li:"li",code:"code",h2:"h2",pre:"pre",section:"section",ol:"ol"},(0,a.ah)(),e.components);return l.createElement(l.Fragment,null,l.createElement(t.h1,null,"Why DuckDB is my first choice for data processing"),"\n",l.createElement(t.p,null,"Over the past few years, I've found myself using DuckDB more and more for data processing, to the point where I now use it almost exclusively, usually from within Python."),"\n",l.createElement(t.p,null,"We're moving towards a simpler world where most tabular data can be processed on a single large machine",l.createElement(t.sup,null,l.createElement(t.a,{href:"#user-content-fn-1",id:"user-content-fnref-1","data-footnote-ref":!0,"aria-describedby":"footnote-label"},"1"))," and the era of clusters is coming to an end for all but the largest datasets.",l.createElement(t.sup,null,l.createElement(t.a,{href:"#user-content-fn-2",id:"user-content-fnref-2","data-footnote-ref":!0,"aria-describedby":"footnote-label"},"2"))),"\n",l.createElement(t.p,null,"This post sets out some of my favourite features of DuckDB that set it apart from other SQL-based tools.    In a nutshell, it's simple to install, ergonomic, fast, and more fully featured."),"\n",l.createElement(t.p,null,"An ",l.createElement(s.rU,{to:"/recommend_sql/"},"earlier post")," explains why I favour SQL over other APIs such as ",l.createElement(t.a,{href:"https://pola.rs/"},"Polars"),", ",l.createElement(t.a,{href:"https://pandas.pydata.org/"},"pandas")," or ",l.createElement(t.a,{href:"https://dplyr.tidyverse.org/"},"dplyr"),"."),"\n",l.createElement(t.h1,null,"What is DuckDB?"),"\n",l.createElement(t.p,null,"DuckDB is an open source in-process SQL engine that is optimised for analytics queries."),"\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,"'In-process' means it's similar to SQLite in that it runs within your application. You don't need to start a separate service such as Postgres to run it."),"\n",l.createElement(t.li,null,"'Optimised for analytics queries' means that it's designed for operations like joins and aggregations involving large numbers of rows, as opposed to atomic transactions."),"\n"),"\n",l.createElement(t.p,null,"The performance difference of analytics-optimised engines (",l.createElement(t.a,{href:"https://en.wikipedia.org/wiki/Online_analytical_processing"},"OLAP"),") vs. transactions-optimised engines (",l.createElement(t.a,{href:"https://en.wikipedia.org/wiki/Online_transaction_processing"},"OLTP"),") should not be underestimated. A query running in DuckDB can be 100 or even 1,000 times faster than exactly the same query running in (say) SQLite or Postgres."),"\n",l.createElement(t.p,null,"A core use-case of DuckDB is where you have one or more large datasets on disk in formats like ",l.createElement(t.code,null,"csv"),", ",l.createElement(t.code,null,"parquet")," or ",l.createElement(t.code,null,"json")," which you want to batch process.  You may want to perform cleaning, joins, aggregation, derivation of new columns - that sort of thing."),"\n",l.createElement(t.p,null,"But you can also use DuckDB for many other simpler tasks like viewing a csv file from the command line."),"\n",l.createElement(t.h1,null,"My favourite features"),"\n",l.createElement(t.h2,null,"Speed"),"\n",l.createElement(t.p,null,"DuckDB consistently benchmarks as one of the fastest data processing engines.  The benchmarks I've seen",l.createElement(t.sup,null,l.createElement(t.a,{href:"#user-content-fn-3",id:"user-content-fnref-3","data-footnote-ref":!0,"aria-describedby":"footnote-label"},"3"))," show there's not much in it between the leading open source engines - which at the moment seem to be ",l.createElement(t.a,{href:"https://pola.rs/"},"polars"),", ",l.createElement(t.a,{href:"https://duckdb.org/"},"DuckDB"),", ",l.createElement(t.a,{href:"https://datafusion.apache.org/"},"DataFusion"),",  ",l.createElement(t.a,{href:"https://spark.apache.org/"},"Spark")," and ",l.createElement(t.a,{href:"https://www.dask.org/"},"Dask"),".  Spark and Dask can be competitive on large data, but slower on small data."),"\n",l.createElement(t.h2,null,"Simple to install, no dependencies"),"\n",l.createElement(t.p,null,"DuckDB itself is a single precompiled binary.  In Python, it can be ",l.createElement(t.code,null,"pip install"),"ed with no dependencies.  This makes it a joy to install compared to other more heavyweight options like Spark.  Combined with ",l.createElement(t.code,null,"uv"),", you can stand up a fresh DuckDB Python environment from nothing in less than a second - see ",l.createElement(t.a,{href:"https://akrabat.com/using-uv-as-your-shebang-line/"},"here"),"."),"\n",l.createElement(t.h2,null,"CI and testing"),"\n",l.createElement(t.p,null,"With its speed and almost-zero startup time, DuckDB is ideally suited for CI and testing of data engineering pipelines."),"\n",l.createElement(t.p,null,"Historically this has been fiddly and running a large suite of tests in e.g. Apache Spark has been time consuming and frustrating.  Now it's much simpler to set up the test environment, and there's less scope for differences between it and your production pipelines."),"\n",l.createElement(t.h2,null,"Writing SQL code"),"\n",l.createElement(t.p,null,"This simplicity and speed also applies to writing new SQL, and getting syntax right before running it on a large dataset.  Historically I have found this annoying in engines like Spark (where it takes a few seconds to start Spark in local mode), or even worse when you're forced to run queries in a proprietary tool like AWS Athena.",l.createElement(t.sup,null,l.createElement(t.a,{href:"#user-content-fn-4",id:"user-content-fnref-4","data-footnote-ref":!0,"aria-describedby":"footnote-label"},"4"))),"\n",l.createElement(t.p,null,"There's even a DuckDB UI with autocomplete - see ",l.createElement(t.a,{href:"https://duckdb.org/docs/stable/extensions/ui.html"},"here"),"."),"\n",l.createElement(t.h2,null,"Friendly SQL"),"\n",l.createElement(t.p,null,"The DuckDB team has implemented a wide range of innovations in its SQL dialect that make it a joy to use. See the following blog posts ",l.createElement(t.a,{href:"https://duckdb.org/2022/05/04/friendlier-sql.html"},"1")," ",l.createElement(t.a,{href:"https://duckdb.org/2023/08/23/even-friendlier-sql.html"},"2")," ",l.createElement(t.a,{href:"https://duckdb.org/docs/stable/sql/dialect/friendly_sql.html"},"3")," ",l.createElement(t.a,{href:"https://duckdb.org/2024/08/19/duckdb-tricks-part-1.html"},"4")," ",l.createElement(t.a,{href:"https://duckdb.org/2024/10/11/duckdb-tricks-part-2.html"},"5")," ",l.createElement(t.a,{href:"https://duckdb.org/2024/11/29/duckdb-tricks-part-3.html"},"6"),"."),"\n",l.createElement(t.p,null,"Some of my favourites are the ",l.createElement(t.a,{href:"https://duckdb.org/docs/stable/sql/expressions/star.html#exclude-clause"},l.createElement(t.code,null,"EXCLUDE"))," keyword, and the ",l.createElement(t.a,{href:"https://duckdb.org/docs/stable/sql/query_syntax/select.html"},l.createElement(t.code,null,"COLUMNS"))," keyword which allows you to select and regex-replace a subset of columns.",l.createElement(t.sup,null,l.createElement(t.a,{href:"#user-content-fn-5",id:"user-content-fnref-5","data-footnote-ref":!0,"aria-describedby":"footnote-label"},"5")),"  I also like ",l.createElement(t.code,null,"QUALIFY")," and the aggregate modifiers on window functions, see ",l.createElement(t.a,{href:"https://duckdb.org/2025/02/10/window-catchup.html#qualify-clause"},"here"),"."),"\n",l.createElement(t.p,null,"Another is the ability to ",l.createElement(t.a,{href:"https://duckdb.org/2023/08/23/even-friendlier-sql.html#function-chaining"},"function chain"),", like ",l.createElement(t.code,null,"first_name.lower().trim()"),"."),"\n",l.createElement(t.h2,null,"Fast support for all your favourite filetypes"),"\n",l.createElement(t.p,null,"You can query data directly from files, including on s3, or on the web."),"\n",l.createElement(t.p,null,"For example to query a folder of parquet files:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-sql"},"select *\nfrom read_parquet('path/to/*.parquet')\n")),"\n",l.createElement(t.p,null,"or even (on CORS enabled files) you can run SQL directly:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-sql"},"select *\nfrom read_parquet('https://raw.githubusercontent.com/plotly/datasets/master/2015_flights.parquet')\nlimit 2;\n")),"\n",l.createElement(t.p,null,"Click ",l.createElement(t.a,{href:"https://shell.duckdb.org/#queries=v0,select-*-from-read_parquet('https%3A%2F%2Fraw.githubusercontent.com%2Fplotly%2Fdatasets%2Fmaster%2F2015_flights.parquet')-limit-2~"},"here")," to try this query yourself in the DuckDB web shell."),"\n",l.createElement(t.p,null,"One of the easiest ways to cause problems in your data pipelines is to fail to be strict about incoming data types from untyped formats such as csv.  DuckDB provides lots of options here - see ",l.createElement(t.a,{href:"https://duckdb.org/docs/stable/data/csv/overview.html"},"here"),"."),"\n",l.createElement(t.h2,null,"Python API"),"\n",l.createElement(t.p,null,"Many data pipelines effectively boil down to a long sequence of CTEs:"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-sql"},"WITH\ninput_data AS (\n    SELECT * FROM read_parquet('...')\n),\nstep_1 AS (\n    SELECT ... FROM input_data JOIN ...\n),\nstep_2 AS (\n    SELECT ... FROM step_1\n)\nSELECT ... FROM step_2;\n")),"\n",l.createElement(t.p,null,"When developing a pipeline like this, we often want to inspect what's happened at each step."),"\n",l.createElement(t.p,null,"In Python, we can write"),"\n",l.createElement(t.pre,null,l.createElement(t.code,{className:"language-python"},'\ninput_data = duckdb.sql("SELECT * FROM read_parquet(\'...\')")\nstep_1 = duckdb.sql("SELECT ... FROM input_data JOIN ...")\nstep_2 = duckdb.sql("SELECT ... FROM step_1")\nfinal = duckdb.sql("SELECT ... FROM step_2;")\n')),"\n",l.createElement(t.p,null,"This makes it easy to inspect what the data looks like at ",l.createElement(t.code,null,"step_2")," with no performance loss, since these steps will be executed lazily when they're run all at once."),"\n",l.createElement(t.p,null,"This also facilitates easier testing of SQL in CI, since each step can be an independently-tested function."),"\n",l.createElement(t.h2,null,"ACID compliance"),"\n",l.createElement(t.p,null,"DuckDB offers full ACID compliance for bulk data operations, which sets it apart from other analytical data systems - see ",l.createElement(t.a,{href:"https://duckdb.org/2024/09/25/changing-data-with-confidence-and-acid.html"},"here"),".  You can listen to more about this on ",l.createElement(t.a,{href:"https://duckdb.org/media/duckdb-deep-dive-lakehouse-challenges/"},"in this podcast"),", transcribed ",l.createElement(t.a,{href:"https://gist.github.com/RobinL/bbabbe22d9177230648b7fc9a22a84d7"},"here"),"."),"\n",l.createElement(t.p,null,"This is a very interesting new development, making DuckDB potentially a suitable replacement for lakehouse formats such as Iceberg or Delta lake for medium scale data."),"\n",l.createElement(t.h2,null,"High performance UDFs and community extensions"),"\n",l.createElement(t.p,null,"A longstanding difficulty with data processing engines has been the difficulty in writing high performance user defined functions (UDFs)."),"\n",l.createElement(t.p,null,"For example, in PySpark, you will generally get best performance by writing custom Scala, compiling to a JAR, and registering it with Spark.  But this is cumbersome and in practice, you will encounter a lot of issues around Spark version compatibility and security restrictions environments such as DataBricks."),"\n",l.createElement(t.p,null,"In DuckDB high performance custom UDFs can be written in C++.  Whilst writing these functions is certainly not trivial, DuckDB ",l.createElement(t.a,{href:"https://duckdb.org/2024/07/05/community-extensions.html"},"community extensions")," offers a low-friction way of distributing the code. Community extensions can be installed almost instantly with a single command such as ",l.createElement(t.code,null,"INSTALL h3 FROM community")," to install hierarchical hexagonal indexing for geospatial data."),"\n",l.createElement(t.h2,null,"Documentation"),"\n",l.createElement(t.p,null,"The team provide documentation as a ",l.createElement(t.a,{href:"https://duckdb.org/duckdb-docs.md"},"single markdown file")," so it can easily be provided to an LLM."),"\n",l.createElement(t.p,null,"My top tip: if you load this file in your code editor, and use code folding, it's easy to copy the parts of the documentation you need into context."),"\n",l.createElement(t.h1,null,"Final thoughts"),"\n",l.createElement(t.p,null,"Much of this blog post is based on my experience supporting multiple SQL dialects in ",l.createElement(t.a,{href:"https://github.com/moj-analytical-services/splink"},"Splink"),", an open source library for record linkage at scale.  We've found that transitioning towards recommending DuckDB as the default backend choice has increased adoption of the library and significantly reduced the amount of problems faced by users, even for large linkage tasks, whilst speeding up workloads very substantially."),"\n",l.createElement(t.p,null,"We've also found it's hugely increased the simplicity and speed of developing and testing new features."),"\n",l.createElement(t.h2,null,"Interesting things to keep an eye on"),"\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,"The ",l.createElement(t.a,{href:"https://github.com/duckdb/duckdb-postgres"},"PosgreSQL Extension")," allows you to attach a Postgres database and query it directly from DuckDB."),"\n",l.createElement(t.li,null,l.createElement(t.a,{href:"https://github.com/duckdb/pg_duckdb"},l.createElement(t.code,null,"pg_duckdb"))," allows you to embed the DuckDB computation engine within Postgres."),"\n"),"\n",l.createElement(t.p,null,"The later in particular seems potentially extremely powerful, enabling Postgres to be simultanouesly optimised for analytics and transactional processing.  I think it's likely to see widespread adoption, especially after they iron out a few of the current shortcomings around enabling and optimising the use of Postgres indexes and pushing up filters up to PostGres."),"\n",l.createElement(t.section,{"data-footnotes":!0,className:"footnotes"},l.createElement(t.h2,{className:"sr-only",id:"footnote-label"},"Footnotes"),"\n",l.createElement(t.ol,null,"\n",l.createElement(t.li,{id:"user-content-fn-1"},"\n",l.createElement(t.p,null,"As a long-time Spark user, I am glad to be rid of needing to know lots of intricate configuration options for Spark tuning ",l.createElement(t.a,{href:"#user-content-fnref-1","data-footnote-backref":!0,className:"data-footnote-backref","aria-label":"Back to content"},"↩")),"\n"),"\n",l.createElement(t.li,{id:"user-content-fn-2"},"\n",l.createElement(t.p,null,"With 192 core processors such as ",l.createElement(t.a,{href:"https://www.tomshardware.com/pc-components/cpus/amd-launches-epyc-turin-9005-series-our-benchmarks-of-fifth-gen-zen-5-chips-with-up-to-192-cores-500w-tdp"},"this")," available in the cloud and only costing around $15,000, the complexity of clusters can be avoided unless you have genuinely huge data.  It's also worth noting there is actually now a distributed version of DuckDB, see ",l.createElement(t.a,{href:"https://news.ycombinator.com/item?id=43248947"},"here"),". ",l.createElement(t.a,{href:"#user-content-fnref-2","data-footnote-backref":!0,className:"data-footnote-backref","aria-label":"Back to content"},"↩")),"\n"),"\n",l.createElement(t.li,{id:"user-content-fn-3"},"\n",l.createElement(t.p,null,"For instance see ",l.createElement(t.a,{href:"https://docs.coiled.io/blog/tpch.html"},"here"),", ",l.createElement(t.a,{href:"https://duckdblabs.github.io/db-benchmark/"},"here")," and ",l.createElement(t.a,{href:"https://milescole.dev/data-engineering/2024/12/12/Should-You-Ditch-Spark-DuckDB-Polars.html"},"here"),"/",l.createElement(t.a,{href:"https://news.ycombinator.com/item?id=42419224"},"discussion"),". ",l.createElement(t.a,{href:"#user-content-fnref-3","data-footnote-backref":!0,className:"data-footnote-backref","aria-label":"Back to content"},"↩")),"\n"),"\n",l.createElement(t.li,{id:"user-content-fn-4"},"\n",l.createElement(t.p,null,"To be clear, Athena is a very powerful and useful tool.  I just find it frustrating for developing and quickly iterating queries of moderate complexity.  An example of why it's easier in DuckDB is ",l.createElement(t.a,{href:"https://github.com/duckdb/duckdb/discussions/16338#discussioncomment-12267144"},"this kind")," of reprex. ",l.createElement(t.a,{href:"#user-content-fnref-4","data-footnote-backref":!0,className:"data-footnote-backref","aria-label":"Back to content"},"↩")),"\n"),"\n",l.createElement(t.li,{id:"user-content-fn-5"},"\n",l.createElement(t.p,null,"For instance, we can select all columns prefixed with ",l.createElement(t.code,null,"emp_")," and rename to remove the prefix as follows: ",l.createElement(t.code,null,"SELECT COLUMNS('emp_(.*)') AS '\\1'")," ",l.createElement(t.a,{href:"#user-content-fnref-5","data-footnote-backref":!0,className:"data-footnote-backref","aria-label":"Back to content"},"↩")),"\n"),"\n"),"\n"))}t.default=function(e){return void 0===e&&(e={}),l.createElement(r.fE,e,l.createElement(c,e))}},7825:function(e,t,n){n.d(t,{H:function(){return r}});var a=n(7294),l=n(4160);const r=e=>{let{frontmatter:t}=e;const{title:n,description:r,image:o,siteUrl:s,twitterUsername:i}=(0,l.K2)("1865044719").site.siteMetadata,c={title:(null==t?void 0:t.title)||n,description:(null==t?void 0:t.description)||r,image:`${s}${(null==t?void 0:t.image)||o}`,url:`${s}${(null==t?void 0:t.pathname)||""}`,twitterUsername:i,...t},u=null==t?void 0:t.stylesheet;return a.createElement(a.Fragment,null,a.createElement("title",null,c.title),a.createElement("meta",{name:"description",content:c.description}),a.createElement("meta",{name:"image",content:c.image}),u&&a.createElement("link",{rel:"stylesheet",type:"text/css",href:`/styles/${u}`}))}}}]);
//# sourceMappingURL=component---src-mdx-recommend-duckdb-mdx-357fab64f0789da5e2ee.js.map