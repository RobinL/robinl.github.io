{"version":3,"file":"component---src-mdx-address-matching-mdx-ab4e0cfbac2c26fa3c43.js","mappings":"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","sources":["webpack://robinlinacre/./src/mdx/address_matching.mdx","webpack://robinlinacre/./src/hooks/use-site-metadata.jsx","webpack://robinlinacre/./src/components/SEO.jsx","webpack://robinlinacre/./src/components/Subtitle.jsx","webpack://robinlinacre/./src/mdx/address_matching/AddressCandidateComparison.jsx","webpack://robinlinacre/./src/mdx/address_matching/AddressComparison.jsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport {MDXLayout} from \"../components/MDXLayout\";\nimport {SEO} from \"../components/SEO\";\nimport Subtitle from \"../components/Subtitle.jsx\";\nimport {Link} from \"gatsby\";\nimport AddressComparison from \"./address_matching/AddressComparison.jsx\";\nimport AddressCandidatesComparison from \"./address_matching/AddressCandidateComparison.jsx\";\nexport const Head = props => React.createElement(SEO, {\n  frontmatter: props.pageContext.frontmatter\n});\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h2: \"h2\",\n    p: \"p\",\n    sup: \"sup\",\n    a: \"a\",\n    mark: \"mark\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    h3: \"h3\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    ol: \"ol\",\n    em: \"em\",\n    strong: \"strong\",\n    section: \"section\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"Building Accurate Address Matching Systems\"), \"\\n\", React.createElement(Subtitle, null, \"A bag of tricks to improve the accuracy of geocoding\"), \"\\n\", React.createElement(_components.h2, null, \"The challenge\"), \"\\n\", React.createElement(_components.p, null, \"Address matching is a notoriously difficult problem due to unpredictable structure of addresses\", React.createElement(_components.sup, null, React.createElement(_components.a, {\n    href: \"#user-content-fn-8\",\n    id: \"user-content-fnref-8\",\n    \"data-footnote-ref\": true,\n    \"aria-describedby\": \"footnote-label\"\n  }, \"1\")), \" and the many different ways an address can be written.\"), \"\\n\", React.createElement(_components.p, null, \"Substantial variation can exist between two matching addresses - for instance:\"), \"\\n\", React.createElement(AddressComparison, {\n    addressA: React.createElement(React.Fragment, null, React.createElement(_components.mark, null, \"Flat\"), \" 165 \", React.createElement(_components.mark, null, \"Block 3\"), \" Philpot Square, \", React.createElement(_components.mark, null, \"Hammersmith And Fulham\")),\n    addressB: React.createElement(React.Fragment, null, \"165, Philpot Square, \", React.createElement(_components.mark, null, \"London\")),\n    isMatch: true\n  }), \"\\n\", React.createElement(_components.p, null, \"whereas the following example has far less variation, yet does not match:\"), \"\\n\", React.createElement(AddressComparison, {\n    addressA: React.createElement(React.Fragment, null, \"Flat A 2\", React.createElement(_components.mark, null, \"4\"), \" Jubilee Street, London, LO1 23D\"),\n    addressB: React.createElement(React.Fragment, null, \"Flat A 2\", React.createElement(_components.mark, null, \"5\"), \" Jubilee Street, London, LO1 23D\"),\n    isMatch: false\n  }), \"\\n\", React.createElement(_components.p, null, \"The challenge is therefore to develop an algorithm that can somehow 'see' that the first pair of addresses are more similar than the second pair.\"), \"\\n\", React.createElement(_components.p, null, \"Unfortunately one of the most effective general approaches to record linkage – known as the \", React.createElement(Link, {\n    to: \"/intro_to_probabilistic_linkage/\"\n  }, \"Fellegi-Sunter model\"), \" and implemented in \", React.createElement(_components.a, {\n    href: \"http://github.com/moj-analytical-services/splink\"\n  }, \"Splink\"), \" – is not well suited to address matching because:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"there is a strong correlation between different parts of an address, violating the model's statistical assumptions\"), \"\\n\", React.createElement(_components.li, null, \"the model assumes input data is split across multiple columns (e.g. first name, surname, DoB etc.), but address data is often received as a single string, and reliably parsing this into a set of standardised columns is difficult\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"In this post, I share some tricks and feature engineering techniques we can use to exploit the information in addresses as much as possible, to maximise geocoding accuracy.\", React.createElement(_components.sup, null, React.createElement(_components.a, {\n    href: \"#user-content-fn-3\",\n    id: \"user-content-fnref-3\",\n    \"data-footnote-ref\": true,\n    \"aria-describedby\": \"footnote-label\"\n  }, \"2\"))), \"\\n\", React.createElement(_components.p, null, \"Concrete implementations of some of these tricks can be found in two open source address matching libraries:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://github.com/RobinL/uk_address_matcher\"\n  }, React.createElement(_components.code, null, \"uk_address_matcher\")), React.createElement(\"span\", {\n    style: {\n      marginLeft: '0.25em',\n      verticalAlign: '0.0em'\n    },\n    \"aria-label\": \"external link\",\n    title: \"External link\"\n  }, React.createElement(\"svg\", {\n    width: \"16\",\n    height: \"16\",\n    viewBox: \"0 0 24 24\",\n    \"aria-hidden\": \"true\"\n  }, React.createElement(\"path\", {\n    d: \"M14 3h7v7h-2V6.414l-9.293 9.293-1.414-1.414L17.586 5H14V3z\",\n    fill: \"#2563eb\"\n  }), React.createElement(\"path\", {\n    d: \"M5 5h5v2H7v10h10v-3h2v5H5V5z\",\n    fill: \"#2563eb\"\n  }))), \" a \", React.createElement(_components.a, {\n    href: \"https://github.com/moj-analytical-services/splink\"\n  }, \"Splink\"), \" based address matching library focussed on UK addresses\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://github.com/ajl2718/whereabouts\"\n  }, React.createElement(_components.code, null, \"whereabouts\")), React.createElement(\"span\", {\n    style: {\n      marginLeft: '0.25em',\n      verticalAlign: '0.0em'\n    },\n    \"aria-label\": \"external link\",\n    title: \"External link\"\n  }, React.createElement(\"svg\", {\n    width: \"16\",\n    height: \"16\",\n    viewBox: \"0 0 24 24\",\n    \"aria-hidden\": \"true\"\n  }, React.createElement(\"path\", {\n    d: \"M14 3h7v7h-2V6.414l-9.293 9.293-1.414-1.414L17.586 5H14V3z\",\n    fill: \"#2563eb\"\n  }), React.createElement(\"path\", {\n    d: \"M5 5h5v2H7v10h10v-3h2v5H5V5z\",\n    fill: \"#2563eb\"\n  }))), \", a DuckDB-powered address matching library, using \", React.createElement(_components.a, {\n    href: \"https://arxiv.org/pdf/1712.09691?\"\n  }, \"signature based\"), \" geocoding methods. Initially developed for Australian addresses, it also supports the creation of geocoding databases for other countries\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"Structuring the problem\"), \"\\n\", React.createElement(_components.p, null, \"I will assume that we have:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"A list of messy addresses (e.g. addresses that have been entered by hand by users)\"), \"\\n\", React.createElement(_components.li, null, \"A canonical address file (e.g. in the UK, an Ordnance Survey product such as \", React.createElement(_components.a, {\n    href: \"https://docs.os.uk/osngd/data-structure/address/gb-address\"\n  }, \"Built Address\"), \")\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"To be as general as possible, we'll assume the address in these files is just a single string.\"), \"\\n\", React.createElement(_components.p, null, \"The address matching problem can be structured into two main stages:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://moj-analytical-services.github.io/splink/topic_guides/blocking/blocking_rules.html?h=blocking#blocking\"\n  }, \"Blocking\"), \" (finding a small number of plausible candidates from the canonical address file)\"), \"\\n\", React.createElement(_components.li, null, \"Scoring (to rank the candidates and thereby identify the best match).\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"These steps are independent, so we can mix and match different blocking and scoring techniques.\"), \"\\n\", React.createElement(_components.p, null, \"However, prior to either of these steps, we need to decide how best to represent the address data.\"), \"\\n\", React.createElement(_components.h2, null, \"How to represent the address data - a data-driven approach\"), \"\\n\", React.createElement(_components.p, null, \"A tempting first step is to attempt to parse the messy addresses semantically - e.g. splitting out flat number, house number, street name and so on.\", React.createElement(_components.sup, null, React.createElement(_components.a, {\n    href: \"#user-content-fn-1\",\n    id: \"user-content-fnref-1\",\n    \"data-footnote-ref\": true,\n    \"aria-describedby\": \"footnote-label\"\n  }, \"3\"))), \"\\n\", React.createElement(_components.p, null, \"This is appealing because it appears to enable powerful scoring rules, such as 'if the building number is different, the addresses do not match'.\"), \"\\n\", React.createElement(_components.p, null, \"In practice, this approach suffers from a paradox: the hardest addresses to match often contain ambiguities which make them the hardest to parse, and the problem of parsing the address correctly collapses into needing to  find the true address.\", React.createElement(_components.sup, null, React.createElement(_components.a, {\n    href: \"#user-content-fn-9\",\n    id: \"user-content-fnref-9\",\n    \"data-footnote-ref\": true,\n    \"aria-describedby\": \"footnote-label\"\n  }, \"4\"))), \"\\n\", React.createElement(_components.p, null, \"As a result, a data-driven approach is more powerful. We can treat the address as a single string from which we can extract certain features such as 'the first number' or 'most unusual bigram' without attaching too much semantic meaning.  This enables us to draw on aggregate characteristics of the data itself to detect the most important features of the address.\"), \"\\n\", React.createElement(_components.p, null, \"It gives us greater flexibility in feature engineering, because we can find features that have no particular structural or semantic meaning but are nonetheless useful for matching.\"), \"\\n\", React.createElement(_components.p, null, \"It also prevents us being too rigid later in our blocking and scoring approaches - for example, it avoids the trap of logic like 'if the building number is different then it's not a match' - which contains an implicit assumption of complete information that's correctly parsed.\"), \"\\n\", React.createElement(_components.h2, null, \"Blocking stage\"), \"\\n\", React.createElement(_components.p, null, \"The purpose of blocking is to recover a list of plausible candidate addresses.  The aim of the blocking stage is to have high recall (i.e. not to miss the true match)\", React.createElement(_components.sup, null, React.createElement(_components.a, {\n    href: \"#user-content-fn-10\",\n    id: \"user-content-fnref-10\",\n    \"data-footnote-ref\": true,\n    \"aria-describedby\": \"footnote-label\"\n  }, \"5\")), \".  Precision is less important, because we will be scoring the candidates to find the true match at the next stage.\"), \"\\n\", React.createElement(_components.p, null, \"For example, a simple blocking strategy could be to find all addresses in the postcode of the query address\", React.createElement(_components.sup, null, React.createElement(_components.a, {\n    href: \"#user-content-fn-2\",\n    id: \"user-content-fnref-2\",\n    \"data-footnote-ref\": true,\n    \"aria-describedby\": \"footnote-label\"\n  }, \"6\")), \".  This is a good start, but in practice suffers two flaws:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"The list of candidates can be excessively long, resulting in slower scoring performance\"), \"\\n\", React.createElement(_components.li, null, \"The query address may not have a postcode, or the postcode may be incorrect\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"As a result we need to supplement a postcode-based blocking strategy with some additional techniques.  The idea is that any of these techniques in isolation may miss the true match, but the  combined results should almost always contain it.\"), \"\\n\", React.createElement(_components.h3, null, \"1. Surmounting problems of common tokens: n-grams combined with term frequencies\"), \"\\n\", React.createElement(_components.p, null, \"We can pre-process addresses to extract n-grams and their associated term frequencies (frequency of occurrence across the corpus of all addresses).   This allows us to identify which tokens are uncommon enough to be useful for blocking (i.e. will restrict the number of candidates to a manageable number).\"), \"\\n\", React.createElement(_components.p, null, \"Many strategies are possible here, but a simple approach could be to identify the least common bigram or trigram in each address, and to block on\", React.createElement(_components.sup, null, React.createElement(_components.a, {\n    href: \"#user-content-fn-4\",\n    id: \"user-content-fnref-4\",\n    \"data-footnote-ref\": true,\n    \"aria-describedby\": \"footnote-label\"\n  }, \"7\")), \" that.  For performance reasons, we'd want to filter out any excessively common ones.\"), \"\\n\", React.createElement(_components.p, null, \"For example each individual token in \", React.createElement(_components.code, null, \"Flat A 24 Jubilee Street London\"), \" is very common, but the tri-gram \", React.createElement(_components.code, null, \"A 24 Jubilee\"), \" will appear in at most a handful of addresses in the country.\"), \"\\n\", React.createElement(_components.h3, null, \"2. Word order: Single words sorted by term frequency\"), \"\\n\", React.createElement(_components.p, null, \"A variation on the n-gram approach is to extract the most unusual single tokens (words) in the address, and block on (say) the two least common tokens in the address.\"), \"\\n\", React.createElement(_components.p, null, \"This is useful to avoid the problem of missing or misordered tokens.  For example, in the Philpot Square example, \", React.createElement(_components.code, null, \"Philpot\"), \" and \", React.createElement(_components.code, null, \"165\"), \" are unusual tokens and there may only be a single address in the country with both tokens, but they don't predictably appear next to each other.\"), \"\\n\", React.createElement(_components.h3, null, \"3.  Discriminating tokens amongst neighbouring addresses\"), \"\\n\", React.createElement(_components.p, null, \"By working back to front and eliminating common tokens, we can identify the following discriminating tokens (highlighted):\"), \"\\n\", React.createElement(\"pre\", {\n    style: {\n      display: 'inline-block',\n      width: 'max-content',\n      textAlign: 'right',\n      background: 'none',\n      border: 'none',\n      padding: 0\n    }\n  }, React.createElement(\"pre\", null, React.createElement(\"code\", null, React.createElement(\"mark\", null, \"1\"), \" Rainbow Lane Taunton TA1 1AB\")), React.createElement(\"pre\", null, React.createElement(\"code\", null, React.createElement(\"mark\", null, \"2\"), \" Rainbow Lane Taunton TA1 1AB\")), React.createElement(\"pre\", null, React.createElement(\"code\", null, React.createElement(\"mark\", null, \"Highfield\"), \" Rainbow Lane Taunton TA1 1AB\")), React.createElement(\"pre\", null, React.createElement(\"code\", null, React.createElement(\"mark\", null, \"Old Station House\"), \" Rainbow Lane Taunton TA1 1AB\")), React.createElement(\"pre\", null, React.createElement(\"code\", null, React.createElement(\"mark\", null, \"5\"), \" Rainbow Lane Taunton TA1 1AB\"))), \"\\n\", React.createElement(_components.p, null, \"These highlighted n-grams can be used for blocking and can be especially used for non-numeric house names, combined with (say) the first half of the postcode.\"), \"\\n\", React.createElement(_components.h3, null, \"4. Signature based blocking\"), \"\\n\", React.createElement(_components.p, null, \"Signature based candidate search, described in \", React.createElement(_components.a, {\n    href: \"https://arxiv.org/abs/1712.09691\"\n  }, \"this paper\"), \" and implemented in \", React.createElement(_components.a, {\n    href: \"https://github.com/ajl2718/whereabouts\"\n  }, React.createElement(_components.code, null, \"whereabouts\")), React.createElement(\"span\", {\n    style: {\n      marginLeft: '0.25em',\n      verticalAlign: '0.0em'\n    },\n    \"aria-label\": \"external link\",\n    title: \"External link\"\n  }, React.createElement(\"svg\", {\n    width: \"16\",\n    height: \"16\",\n    viewBox: \"0 0 24 24\",\n    \"aria-hidden\": \"true\"\n  }, React.createElement(\"path\", {\n    d: \"M14 3h7v7h-2V6.414l-9.293 9.293-1.414-1.414L17.586 5H14V3z\",\n    fill: \"#2563eb\"\n  }), React.createElement(\"path\", {\n    d: \"M5 5h5v2H7v10h10v-3h2v5H5V5z\",\n    fill: \"#2563eb\"\n  }))), \" is effectively a generalisation of these techniques.\"), \"\\n\", React.createElement(_components.p, null, \"The idea is that there is significant redundancy in most addresses, we can devise 'signatures' which are subsets (often n-grams) of the full address which narrow down possible candidates to only a handful of candidates.  Developing signatures is not completely automated and requires domain-specific knowledge.   In this view, the techniques above are examples of types of signatures that may be useful in the context of addresses.\"), \"\\n\", React.createElement(_components.h3, null, \"5. Deriving multiple variations of the canonical address\"), \"\\n\", React.createElement(_components.p, null, \"In many cases, the list of canonical addresses will be split robustly and semantically across multiple columns (e.g. the Built Address spec \", React.createElement(_components.a, {\n    href: \"https://docs.os.uk/osngd/data-structure/address/gb-address/built-address\"\n  }, \"here\"), \").\"), \"\\n\", React.createElement(_components.p, null, \"If so, we can derive multiple representations of the canonical address by combining these columns in different ways.  This gives a greater chance for blocking to recover the true match, and also means scoring will be more reliable because it increases the similarity between the messy address and the closest representation of the canonical address.\"), \"\\n\", React.createElement(_components.p, null, \"For example, the standard representation may not contain 'floor descriptors' like \", React.createElement(_components.code, null, \"top floor\"), \", but if this is sometimes observed in the messy addresses, we could add this as a variation onto the canonical address.  Or we may want to ensure that we have both the address with business name and without.\"), \"\\n\", React.createElement(_components.p, null, \"This adds accuracy without significantly increasing complexity:  we can treat the variations as additional candidates, score as normal, but then the final score for each candidate becomes the highest score across all variations of the canonical address.\"), \"\\n\", React.createElement(_components.p, null, \"This technique also increases the chance of finding an exact match, so the run time performance tradeoff is not unambiguously negative.\"), \"\\n\", React.createElement(_components.h2, null, \"Scoring stage\"), \"\\n\", React.createElement(_components.p, null, \"The purpose of the scoring stage is to identify the highest scoring candidate found in the blocking stage, to try to identify the correct match.\"), \"\\n\", React.createElement(_components.p, null, \"There are many different scoring approaches, and a weighted combination\", React.createElement(_components.sup, null, React.createElement(_components.a, {\n    href: \"#user-content-fn-6\",\n    id: \"user-content-fnref-6\",\n    \"data-footnote-ref\": true,\n    \"aria-describedby\": \"footnote-label\"\n  }, \"8\")), \" of approaches will often yield the best results\", React.createElement(_components.sup, null, React.createElement(_components.a, {\n    href: \"#user-content-fn-7\",\n    id: \"user-content-fnref-7\",\n    \"data-footnote-ref\": true,\n    \"aria-describedby\": \"footnote-label\"\n  }, \"9\")), \".\"), \"\\n\", React.createElement(_components.h3, null, \"1. Token frequencies within the corpus of all addresses\"), \"\\n\", React.createElement(_components.p, null, \"A simple 'first cut' of a scoring approach can be simply to look at the number of common tokens between the messy address and candidate address, weighted by token frequency in the corpus of all addresses.\"), \"\\n\", React.createElement(\"details\", {\n    style: {\n      border: '1px solid #e5e7eb',\n      borderRadius: '6px',\n      padding: '0.5em',\n      margin: '1em 0'\n    }\n  }, React.createElement(\"summary\", {\n    style: {\n      fontWeight: 'normal',\n      textAlign: 'left',\n      margin: '0em'\n    }\n  }, \" Example - click to expand\"), React.createElement(AddressCandidatesComparison, {\n    messyAddress: React.createElement(React.Fragment, null, React.createElement(_components.mark, null, \"24\"), \" \", React.createElement(_components.mark, null, \"Jubilee\"), \" St, \", React.createElement(_components.mark, null, \"London\")),\n    candidates: [{\n      address: React.createElement(React.Fragment, null, React.createElement(_components.mark, null, \"24\"), \" \", React.createElement(_components.mark, null, \"Jubilee\"), \" Street, \", React.createElement(_components.mark, null, \"London\"), \" LO1 23D\")\n    }]\n  }), React.createElement(_components.table, null, React.createElement(_components.thead, null, React.createElement(_components.tr, null, React.createElement(_components.th, null, \"Overlapping token\"), React.createElement(_components.th, null, \"Share of all addresses containing token\"))), React.createElement(_components.tbody, null, React.createElement(_components.tr, null, React.createElement(_components.td, null, React.createElement(\"mark\", null, \"24\")), React.createElement(_components.td, null, \"0.15%\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, React.createElement(\"mark\", null, \"Jubilee\")), React.createElement(_components.td, null, \"0.003%\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, React.createElement(\"mark\", null, \"London\")), React.createElement(_components.td, null, \"5.0%\")))), React.createElement(_components.p, null, \"final score = 0.0015 × 0.00003 × 0.05 ≈ 2.25 × 10⁻⁹\"), React.createElement(_components.p, null, \"The address with the lowest score is ranked the highest.\")), \"\\n\", React.createElement(_components.p, null, \"This is surprisingly effective, but there are several drawbacks that mean it is possible to improve on this approach:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Token frequency in the corpus of all addresses is not a very good metric of the strength of match within a small group of candidates.  For instance, the token \", React.createElement(_components.code, null, \"London\"), \" is very common in the overall corpus, but for an address in Manchester, it may be highly discriminative.\"), \"\\n\", React.createElement(_components.li, null, \"Similarly, a token may be very uncommon in the overall corpus, but useless to distinguish between candidates.  For example, consider the token \", React.createElement(_components.code, null, \"Rainbow\"), \" in the above list of addresses.\"), \"\\n\", React.createElement(_components.li, null, \"Sometimes the true match may have fewer overlapping tokens than a false match.  For example, in the \", React.createElement(_components.code, null, \"Philpot Square\"), \" example, a different and incorrect candidate may include the tokens \", React.createElement(_components.code, null, \"Block 3\")), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"2. Token (or n-gram) frequencies within candidates\"), \"\\n\", React.createElement(_components.p, null, \"An improvement on using whole-corpus token frequencies is to instead use the frequencies of tokens within the set of candidates.  This is a better measure of the power of the token to distinguish between the candidates.\"), \"\\n\", React.createElement(_components.p, null, \"Similarly, we could use the frequency of n-grams within the set of candidates.\"), \"\\n\", React.createElement(\"details\", {\n    style: {\n      border: '1px solid #e5e7eb',\n      borderRadius: '6px',\n      padding: '0.5em',\n      margin: '1em 0'\n    }\n  }, React.createElement(\"summary\", {\n    style: {\n      fontWeight: 'normal',\n      textAlign: 'left',\n      margin: '0em'\n    }\n  }, \" Example - click to expand\"), React.createElement(_components.p, null, \"For example, consider how the token 'front' is the only token that appears just once amongst the candidates, making it uniquely powerful because it is the only token that discriminates fully between the candidates.\"), React.createElement(AddressCandidatesComparison, {\n    messyAddress: React.createElement(React.Fragment, null, React.createElement(_components.mark, null, \"Front\"), \" Ground Floor Flat 57 Fulham Park Gardens\"),\n    candidates: [{\n      address: React.createElement(React.Fragment, null, \"Flat Ground Floor \", React.createElement(_components.mark, null, \"Front\"), \", 57, Fulham Park Gardens\"),\n      isMatch: true\n    }, {\n      address: React.createElement(React.Fragment, null, \"Flat First Floor, 57, Fulham Park Gardens\"),\n      isMatch: false\n    }, {\n      address: React.createElement(React.Fragment, null, \"Flat Ground Floor, 66, Fulham Park Gardens\"),\n      isMatch: false\n    }, {\n      address: React.createElement(React.Fragment, null, \"Flat Ground Floor Rear, 57, Fulham Park Gardens\"),\n      isMatch: false\n    }]\n  })), \"\\n\", React.createElement(_components.h3, null, \"3. Absence of tokens:  Punishing missing tokens\"), \"\\n\", React.createElement(_components.p, null, \"Where tokens do not overlap, we can apply a penalty to the candidate's score:\"), \"\\n\", React.createElement(\"svg\", {\n    width: \"240\",\n    height: \"160\",\n    viewBox: \"0 0 240 160\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, React.createElement(\"circle\", {\n    cx: \"90\",\n    cy: \"90\",\n    r: \"60\",\n    fill: \"rgba(255,0,0,0.4)\"\n  }), React.createElement(\"circle\", {\n    cx: \"150\",\n    cy: \"90\",\n    r: \"60\",\n    fill: \"rgba(0,0,255,0.4)\"\n  }), React.createElement(\"text\", {\n    x: \"50\",\n    y: \"20\",\n    \"font-size\": \"14\",\n    \"text-anchor\": \"middle\"\n  }, \"Messy tokens\"), React.createElement(\"text\", {\n    x: \"170\",\n    y: \"20\",\n    \"font-size\": \"14\",\n    \"text-anchor\": \"middle\"\n  }, \"Candidate tokens\"), React.createElement(\"text\", {\n    x: \"60\",\n    y: \"95\",\n    \"font-size\": \"18\",\n    \"text-anchor\": \"middle\"\n  }, \"M\"), React.createElement(\"text\", {\n    x: \"170\",\n    y: \"95\",\n    \"font-size\": \"18\",\n    \"text-anchor\": \"middle\"\n  }, \"C\"), React.createElement(\"text\", {\n    x: \"120\",\n    y: \"95\",\n    \"font-size\": \"14\",\n    \"text-anchor\": \"middle\"\n  }, \"M ∩ C\")), \"\\n\", React.createElement(_components.p, null, \"How do we treat tokens in areas M and C?\"), \"\\n\", React.createElement(_components.p, null, \"This turns out to be trickier than it first appears because we can't treat all absent tokens as equal:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"There are a variety of optional tokens that tend to occur towards the end of an address whose absence is close to irrelevant.  Examples may include \", React.createElement(_components.code, null, \"London\"), \",  the names of counties (e.g. \", React.createElement(_components.code, null, \"Somerset\"), \").\"), \"\\n\", React.createElement(_components.li, null, \"Some tokens such as \", React.createElement(_components.code, null, \"Flat\"), \" are often omitted for the sake of brevity\"), \"\\n\", React.createElement(_components.li, null, \"Business names are optional and appear at the beginning of an address\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Tokens in category (1) are relatively easy to identify simply by deriving a list of 'common end tokens' from a large dataset of addresses. Issues (2) and (3) are harder to deal with and I am yet to find a robust methodology.\"), \"\\n\", React.createElement(_components.h3, null, \"4. Absence of tokens:  Matching tokens that exist within other candidates, but not the present candidate\"), \"\\n\", React.createElement(_components.p, null, \"Sometimes a token (or n-gram) from the messy address will be present in \", React.createElement(_components.em, null, \"other\"), \" candidates, but not in the one being scored.  This is a strong indicator \", React.createElement(_components.em, null, \"against\"), \" the candidate being the true match.\"), \"\\n\", React.createElement(\"details\", {\n    style: {\n      border: '1px solid #e5e7eb',\n      borderRadius: '6px',\n      padding: '0.5em',\n      margin: '1em 0'\n    }\n  }, React.createElement(\"summary\", {\n    style: {\n      fontWeight: 'normal',\n      textAlign: 'left',\n      margin: '0em'\n    }\n  }, \" Example - click to expand\"), React.createElement(_components.p, null, \"Consider:\"), React.createElement(AddressCandidatesComparison, {\n    messyAddress: React.createElement(React.Fragment, null, React.createElement(_components.mark, null, \"Flat\"), \" A, 1 Primrose \", React.createElement(_components.mark, null, \"Apartments\"), \", London\"),\n    candidates: [{\n      address: React.createElement(React.Fragment, null, \"Basement A, Block 1 Primrose \", React.createElement(_components.mark, null, \"Apartments\"), \", London\"),\n      isMatch: false\n    }, {\n      address: React.createElement(React.Fragment, null, React.createElement(_components.mark, null, \"Flat A\"), \", Block 1 Primrose \", React.createElement(_components.mark, null, \"Apartments\"), \", London\"),\n      isMatch: true\n    }, {\n      address: React.createElement(React.Fragment, null, React.createElement(_components.mark, null, \"Flat A\"), \", Block 2 Primrose \", React.createElement(_components.mark, null, \"Apartments\"), \", London\"),\n      isMatch: false\n    }, {\n      address: React.createElement(React.Fragment, null, React.createElement(_components.mark, null, \"Flat A\"), \", 1 Primrose Street, London\"),\n      isMatch: false\n    }, {\n      address: React.createElement(React.Fragment, null, React.createElement(_components.mark, null, \"Flat A\"), \", 2 Primrose Street, London\"),\n      isMatch: false\n    }]\n  }), React.createElement(_components.p, null, \"Note that the word \", React.createElement(_components.code, null, \"flat\"), \" is present in the messy address, and most candidates.\"), React.createElement(_components.p, null, \"As a result \", React.createElement(_components.code, null, \"flat\"), \" is a common token within the candidate set, and does not help discriminate between the \", React.createElement(_components.code, null, \"flat\"), \" candidates. The score increment due to 'flat' on the basis of token frequencies will be modest, and so will not strongly differentiate the basement candidate from the others.\"), React.createElement(_components.p, null, \"However, the absence of \", React.createElement(_components.code, null, \"flat\"), \" in candidate 1 strongly suggests this cannot be the match, particularly because we know the word \", React.createElement(_components.code, null, \"flat\"), \" exists in other addresses  (if it existed in no candidates, it would be irrelavant for the purpose of scoring.) To ensure a more highly differentiated score for address 1, we need to apply some sort of score penalty.\"), React.createElement(_components.p, null, \"In summary, this enables the differential between (say) address 1 and addresses 2-5 to be greater than the 'reward' 2-5 will gain from matching on the word 'flat'.\"), React.createElement(_components.p, null, \"Note that in this example, the token \", React.createElement(_components.code, null, \"apartments\"), \" also plays a similar role to \", React.createElement(_components.code, null, \"flat\"), \" in ruling out candidates 4 and 5.\"), React.createElement(_components.p, null, \"Also note in this example, there is no bigram or trigram that uniquely identifies the match.\")), \"\\n\", React.createElement(_components.h3, null, \"5. Discriminating tokens amongst neighbouring addresses\"), \"\\n\", React.createElement(_components.p, null, \"In the \", React.createElement(_components.code, null, \"Rainbow Lane\"), \" example above, we illustrated a technique to find highly discriminating tokens amongst neighbouring addresses.\"), \"\\n\", React.createElement(_components.p, null, \"On the face of it, these tokens are essential information to uniquely pin down the address.\"), \"\\n\", React.createElement(_components.p, null, \"In practice, addresses are not this simple, and there's no guarantee that:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"the messy address will contain these tokens\"), \"\\n\", React.createElement(_components.li, null, \"the tokens are uniquely discriminating amongst the candidates\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"As a result, instead of requiring a match, we can simply place greater weight on these tokens when scoring.\"), \"\\n\", React.createElement(\"details\", {\n    style: {\n      border: '1px solid #e5e7eb',\n      borderRadius: '6px',\n      padding: '0.5em',\n      margin: '1em 0'\n    }\n  }, React.createElement(\"summary\", {\n    style: {\n      fontWeight: 'normal',\n      textAlign: 'left',\n      margin: '0em'\n    }\n  }, \" Example - click to expand\"), React.createElement(_components.p, null, \"The following example illustrates how this simple technique can fail:\"), React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Messy address\"), \":\"), React.createElement(_components.p, null, React.createElement(_components.code, null, \"Flat A 10 Station Street\")), React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Candidates:\")), React.createElement(\"pre\", {\n    style: {\n      display: 'inline-block',\n      width: 'max-content',\n      textAlign: 'right',\n      background: 'none',\n      border: 'none',\n      padding: 0\n    }\n  }, React.createElement(\"pre\", null, React.createElement(\"code\", null, \"9 Station Street\")), React.createElement(\"pre\", null, React.createElement(\"code\", null, React.createElement(\"mark\", null, \"Flat A\"), \" 9 Station Street\")), React.createElement(\"pre\", null, React.createElement(\"code\", null, \"10 Station Street\")), React.createElement(\"pre\", null, React.createElement(\"code\", null, React.createElement(\"mark\", null, \"Basement Flat\"), \" 10 Station Street\")), React.createElement(\"pre\", null, React.createElement(\"code\", null, React.createElement(\"mark\", null, \"10A\"), \" Station Street\")), React.createElement(\"pre\", null, React.createElement(\"code\", null, React.createElement(\"mark\", null, \"10B\"), \" Station Street\"))), React.createElement(_components.p, null, \"Note how the simple rule 'require a match on the discriminating (highlighted) token(s)' would fail in this example; we'd incorrectly match to the \", React.createElement(_components.code, null, \"9 Station Street\"), \" candidate.\")), \"\\n\", React.createElement(_components.h3, null, \"6. Using a fault tolerant trie\"), \"\\n\", React.createElement(_components.p, null, \"Another powerful approach for matching is a fault tolerant trie, see separate article \", React.createElement(Link, {\n    to: \"/fault_tolerant_trie/\"\n  }, \"here\"), \".\"), \"\\n\", React.createElement(_components.h2, null, \"Scoring stage: Interpreting the score\"), \"\\n\", React.createElement(_components.p, null, \"Many record linkage approaches simply treat the score as an ordinal variable, the higher the better.  A score threshold is set, and any candidate above the threshold is considered a match.\"), \"\\n\", React.createElement(_components.p, null, \"In the context of address matching, this approach is not very useful because:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"There should be a single match - we do not want to match a single messy address to multiple candidate addresses\"), \"\\n\", React.createElement(_components.li, null, \"There isn't a strong relationship between 'raw' score and the true match status.  For example, the matcher may correctly 'find' the true match for a simple address like \", React.createElement(_components.code, null, \"1 London Road, Birmingham, B1 1AA\"), \".  But whilst the top-scoring match may be correct, its score may be relatively low due to the simplicity of the address, and the commonness of the tokens.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"As a result, we need a more nuanced approach to scoring.  The goal is that we want a measure of match confidence.\"), \"\\n\", React.createElement(_components.h3, null, \"Using 'distinguishability' to determine match confidence\"), \"\\n\", React.createElement(_components.p, null, \"A powerful technique is to measure the score differential between the top candidate and the second best candidate. We could call this the 'distinguishability' score of the match.\"), \"\\n\", React.createElement(_components.p, null, \"The final match confidence score could then be defined as a combination of the raw score and the distinguishability score - often with more weight placed on the distinguishability score, and perhaps a minimum threshold on the raw score.  For instance, we could define an 'almost certain match' as a candidate with high distinguishability and a raw score that is above some medium threshold.\"), \"\\n\", React.createElement(_components.h2, null, \"Final thoughts\"), \"\\n\", React.createElement(_components.p, null, \"Many of the techniques described above are initially appealing, and can even seem like 'knock out' solutions.  However, I have found through bitter experience that there is always an edge case that undermines their effectiveness, and often there is tension between the information the different techniques seem to provide.\"), \"\\n\", React.createElement(_components.p, null, \"One important reason for this is that the process of candidate search by its nature retrieves a set of candidates that are similar to the messy address - favouring candidates that contain highly discriminative n-grams or other features that 'work against' the scoring rules.\"), \"\\n\", React.createElement(_components.p, null, \"I have come to believe that the most powerful address matching solutions are those that:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Apply clever feature engineering tricks to uncover hidden information in the structure of the addresses\"), \"\\n\", React.createElement(_components.li, null, \"Use contextual information from the corpus of all addresses, and the list of candidates, rather than relying only on pairwise information\"), \"\\n\", React.createElement(_components.li, null, \"Combine this information using match weights to decide how important different features are, as opposed to crafting deterministic logic\"), \"\\n\", React.createElement(_components.li, null, \"Learn the match weights from the data itself using e.g. gradient descent.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"I will end with some examples that highlight the challenges of address matching - and are interesting to consider in the context of the techniques described above.\"), \"\\n\", React.createElement(\"details\", {\n    style: {\n      border: '1px solid #e5e7eb',\n      borderRadius: '6px',\n      padding: '0.5em',\n      margin: '1em 0'\n    }\n  }, React.createElement(\"summary\", {\n    style: {\n      fontWeight: 'normal',\n      textAlign: 'left',\n      margin: '0em'\n    }\n  }, \" Some examples that highlight the challenges of address matching - click to expand\"), React.createElement(AddressComparison, {\n    addressA: React.createElement(React.Fragment, null, \"23A Marchant House, Jubilee Street, London, LO1 23D\"),\n    addressB: React.createElement(React.Fragment, null, \"Flat A, Top Floor, Marchant House, 23 Jubilee Street, Fulham, LO1 23D\"),\n    isMatch: true\n  }), React.createElement(AddressComparison, {\n    addressA: React.createElement(React.Fragment, null, \"6, PADDOCK CLOSE CASTLETHORPE MK19 7AY\"),\n    addressB: React.createElement(React.Fragment, null, \"PIPIT HOUSE, 6, PADDOCK CLOSE, CASTLETHORPE MK19 7AY\"),\n    isMatch: true\n  }), React.createElement(AddressComparison, {\n    addressA: React.createElement(React.Fragment, null, \"Maisonette First And Second Floors, 14, Hadyn Park Road\"),\n    addressB: React.createElement(React.Fragment, null, \"Top Floor Flat 14 Hadyn Park Road, London\"),\n    isMatch: true\n  }), React.createElement(AddressComparison, {\n    addressA: React.createElement(React.Fragment, null, \"Flat 39 Evans House White City Estate\"),\n    addressB: React.createElement(React.Fragment, null, \"39, EVANS HOUSE, AUSTRALIA ROAD, LONDON\"),\n    isMatch: true\n  }), React.createElement(AddressCandidatesComparison, {\n    messyAddress: React.createElement(React.Fragment, null, \"FLAT 3 ST LEGER HOUSE GREAT LINFORD MK14 5HA\"),\n    candidates: [{\n      address: React.createElement(React.Fragment, null, \"GREAT LINFORD HOUSE 1 ST LEGER COURT GREAT LINFORD MK14 5HA\"),\n      isMatch: false\n    }, {\n      address: React.createElement(React.Fragment, null, \"3 ST LEGER HOUSE \", React.createElement(_components.mark, null, \"4A\"), \" ST LEGER COURT GREAT LINFORD MK14 5HA\"),\n      isMatch: true\n    }, {\n      address: React.createElement(React.Fragment, null, \"3 ST LEGER COURT GREAT LINFORD MK14 5HA\"),\n      isMatch: false\n    }]\n  }), React.createElement(AddressCandidatesComparison, {\n    messyAddress: React.createElement(React.Fragment, null, \"Rear Studio Flat 191a Uxbridge Road W12 9RA\"),\n    candidates: [{\n      address: React.createElement(React.Fragment, null, \"FLAT GROUND FLOOR REAR, 191A, UXBRIDGE ROAD, LONDON W12 9RA\"),\n      isMatch: true\n    }, {\n      address: React.createElement(React.Fragment, null, \"NEALE-ROBINSON, 191A, UXBRIDGE ROAD, LONDON W12 9RA \"),\n      isMatch: false\n    }, {\n      address: React.createElement(React.Fragment, null, \"FIRST FLOOR FLAT, 191A, UXBRIDGE ROAD, LONDON W12 9RA\"),\n      isMatch: false\n    }, {\n      address: React.createElement(React.Fragment, null, \"REAR OF, 191E, UXBRIDGE ROAD, LONDON, W12 9RA\"),\n      isMatch: false\n    }]\n  })), \"\\n\", React.createElement(_components.h2, null, \"Acknowledgements\"), \"\\n\", React.createElement(_components.p, null, \"Thanks to \", React.createElement(_components.a, {\n    href: \"https://github.com/ajl2718\"\n  }, \"Alex Lee\"), \" the author of \", React.createElement(_components.code, null, \"whereabouts\"), \" for insightful comments and suggestions - all errors remain my own\"), \"\\n\", React.createElement(_components.section, {\n    \"data-footnotes\": true,\n    className: \"footnotes\"\n  }, React.createElement(_components.h2, {\n    className: \"sr-only\",\n    id: \"footnote-label\"\n  }, \"Footnotes\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, {\n    id: \"user-content-fn-8\"\n  }, \"\\n\", React.createElement(_components.p, null, \"A variety of interesting edge cases can be found in \", React.createElement(_components.a, {\n    href: \"https://www.mjt.me.uk/posts/falsehoods-programmers-believe-about-addresses/\"\n  }, \"Falsehoods Programmers Believe About Addresses\"), \". \", React.createElement(_components.a, {\n    href: \"#user-content-fnref-8\",\n    \"data-footnote-backref\": true,\n    className: \"data-footnote-backref\",\n    \"aria-label\": \"Back to content\"\n  }, \"↩\")), \"\\n\"), \"\\n\", React.createElement(_components.li, {\n    id: \"user-content-fn-3\"\n  }, \"\\n\", React.createElement(_components.p, null, \"To ensure high performance, I've included only techniques that can be implemented in SQL, meaning we can use high performance engines like DuckDB to implement the address matching system. \", React.createElement(_components.a, {\n    href: \"#user-content-fnref-3\",\n    \"data-footnote-backref\": true,\n    className: \"data-footnote-backref\",\n    \"aria-label\": \"Back to content\"\n  }, \"↩\")), \"\\n\"), \"\\n\", React.createElement(_components.li, {\n    id: \"user-content-fn-1\"\n  }, \"\\n\", React.createElement(_components.p, null, \"A \", React.createElement(_components.a, {\n    href: \"https://www.ons.gov.uk/methodology/methodologicalpublications/generalmethodology/onsworkingpaperseries/onsworkingpaperseriesno17usingdatasciencefortheaddressmatchingservice\"\n  }, \"Conditional Random Fields\"), \" or \", React.createElement(_components.a, {\n    href: \"https://pmc.ncbi.nlm.nih.gov/articles/PMC140019/\"\n  }, \"hidden Markov\"), \" model could be used for this, or existing libraries such as \", React.createElement(_components.a, {\n    href: \"https://github.com/openvenues/libpostal\"\n  }, \"libpostal\"), \". \", React.createElement(_components.a, {\n    href: \"#user-content-fnref-1\",\n    \"data-footnote-backref\": true,\n    className: \"data-footnote-backref\",\n    \"aria-label\": \"Back to content\"\n  }, \"↩\")), \"\\n\"), \"\\n\", React.createElement(_components.li, {\n    id: \"user-content-fn-9\"\n  }, \"\\n\", React.createElement(_components.p, null, \"The \", React.createElement(_components.code, null, \"Philpot Square\"), \" address at the top of this article is a good practical example:  how should we interpret the \", React.createElement(_components.code, null, \"165\"), \" in \", React.createElement(_components.code, null, \"165, Philpot Square, London\"), \"?  In difficult examples like this, solving this problem amounts to figuring out what the true address is - so the problem is circular. \", React.createElement(_components.a, {\n    href: \"#user-content-fnref-9\",\n    \"data-footnote-backref\": true,\n    className: \"data-footnote-backref\",\n    \"aria-label\": \"Back to content\"\n  }, \"↩\")), \"\\n\"), \"\\n\", React.createElement(_components.li, {\n    id: \"user-content-fn-10\"\n  }, \"\\n\", React.createElement(_components.p, null, \"High recall is particularly important because some scoring techniques implicitly assume that the true address is among the candidates. \", React.createElement(_components.a, {\n    href: \"#user-content-fnref-10\",\n    \"data-footnote-backref\": true,\n    className: \"data-footnote-backref\",\n    \"aria-label\": \"Back to content\"\n  }, \"↩\")), \"\\n\"), \"\\n\", React.createElement(_components.li, {\n    id: \"user-content-fn-2\"\n  }, \"\\n\", React.createElement(_components.p, null, \"Blocking on postcode only may result in a list of candidates that is too long for performance reasons. In practice, a simple extension could be to limit to addresses that contain the postcode and any of the numbers in the address. \", React.createElement(_components.a, {\n    href: \"#user-content-fnref-2\",\n    \"data-footnote-backref\": true,\n    className: \"data-footnote-backref\",\n    \"aria-label\": \"Back to content\"\n  }, \"↩\")), \"\\n\"), \"\\n\", React.createElement(_components.li, {\n    id: \"user-content-fn-4\"\n  }, \"\\n\", React.createElement(_components.p, null, \"The terminology 'block on' means 'candidate addresses are found using this condition'.   So in this example, we would find any address whose least common bigram  matches the least common bigram in the messy address.  This is conceptually equivalent to an inverted index. \", React.createElement(_components.a, {\n    href: \"#user-content-fnref-4\",\n    \"data-footnote-backref\": true,\n    className: \"data-footnote-backref\",\n    \"aria-label\": \"Back to content\"\n  }, \"↩\")), \"\\n\"), \"\\n\", React.createElement(_components.li, {\n    id: \"user-content-fn-6\"\n  }, \"\\n\", React.createElement(_components.p, null, \"In \", React.createElement(_components.code, null, \"uk_address_matcher\"), \", gradient descent has been used to optimise weights, see \", React.createElement(_components.a, {\n    href: \"https://github.com/RobinL/uk_address_matcher/blob/main/scripts/improve_parameters_using_gradient_descent.py\"\n  }, \"here\"), \". \", React.createElement(_components.a, {\n    href: \"#user-content-fnref-6\",\n    \"data-footnote-backref\": true,\n    className: \"data-footnote-backref\",\n    \"aria-label\": \"Back to content\"\n  }, \"↩\")), \"\\n\"), \"\\n\", React.createElement(_components.li, {\n    id: \"user-content-fn-7\"\n  }, \"\\n\", React.createElement(_components.p, null, \"In my experience, weighted scoring is better than trying to apply deterministic logic because there are too many edge cases so the 'tree' of if statements quickly becomes unmanageable. \", React.createElement(_components.a, {\n    href: \"#user-content-fnref-7\",\n    \"data-footnote-backref\": true,\n    className: \"data-footnote-backref\",\n    \"aria-label\": \"Back to content\"\n  }, \"↩\")), \"\\n\"), \"\\n\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  return React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props));\n}\nexport default MDXContent;\n","import { graphql, useStaticQuery } from 'gatsby';\n\nexport const useSiteMetadata = () => {\n    const data = useStaticQuery(graphql`\n        query {\n            site {\n                siteMetadata {\n                    title\n                    description\n                    twitterUsername\n                    image\n                    siteUrl\n                }\n            }\n        }\n    `);\n\n    return data.site.siteMetadata;\n};\n","import React from 'react';\nimport { useSiteMetadata } from '../hooks/use-site-metadata';\n\nexport const SEO = ({ frontmatter }) => {\n    const {\n        title: defaultTitle,\n        description: defaultDescription,\n        image,\n        siteUrl,\n        twitterUsername,\n    } = useSiteMetadata();\n\n    const seo = {\n        title: frontmatter?.title || defaultTitle,\n        description: frontmatter?.description || defaultDescription,\n        image: `${siteUrl}${frontmatter?.image || image}`,\n        url: `${siteUrl}${frontmatter?.pathname || ``}`,\n        twitterUsername,\n        ...frontmatter,\n    };\n\n    const stylesheetLink = frontmatter?.stylesheet;\n\n    return (\n        <>\n            <title>{seo.title}</title>\n            <meta name=\"description\" content={seo.description} />\n            <meta name=\"image\" content={seo.image} />\n            {stylesheetLink && (\n                <link\n                    rel=\"stylesheet\"\n                    type=\"text/css\"\n                    href={`/styles/${stylesheetLink}`}\n                />\n            )}\n        </>\n    );\n};\n","import React from 'react';\n\nconst Subtitle = ({ children }) => {\n    const newChildren = React.Children.map(children, child => {\n        if (React.isValidElement(child) && child.type === 'p') {\n            // Remove the <p> wrapper that mdx adds by default\n            return child.props.children;\n        }\n        return child;\n    });\n\n    return (\n        <h2 className=\"text-xl font-sans font-normal text-gray-500 mb-8 mt-0\">\n            {newChildren}\n        </h2>\n    );\n};\n\nexport default Subtitle;\n","import React from \"react\";\n\n/**\n * Compact component that compares a single messy address with a list of\n * candidate addresses, allowing portions of each address to be arbitrary JSX.\n *\n * @param {{ messyAddress: React.ReactNode; candidates: Array<{ address: React.ReactNode; isMatch: boolean }> }} props\n */\nexport default function AddressCandidatesComparison({\n    messyAddress,\n    candidates = [],\n}) {\n    const preStyle = {\n        margin: 0,\n        padding: \"0.25rem\",\n        background: \"#f3f4f6\", // tailwind slate-100\n        borderRadius: \"0.25rem\",\n        fontFamily: \"monospace\",\n        fontSize: \"0.85rem\",\n        whiteSpace: \"pre-wrap\",\n        lineHeight: 1.3,\n    };\n\n    const labelStyle = {\n        fontWeight: 600,\n        fontSize: \"0.75rem\",\n        color: \"#374151\", // tailwind slate-700\n        letterSpacing: \"0.01em\",\n    };\n\n    const candidateLabel = candidates.length === 1 ? \"Candidate address\" : \"Candidate addresses\";\n    return (\n        <div\n            style={{\n                border: \"1px solid #d1d5db\", // tailwind slate-300\n                borderRadius: \"0.25rem\",\n                padding: \"0.75rem\",\n                maxWidth: \"40rem\",\n                display: \"flex\",\n                flexDirection: \"column\",\n                gap: \"0.75rem\",\n                fontSize: \"0.85rem\",\n                marginBottom: \"0.5em\", // add spacing under the component\n            }}\n        >\n            {/* Messy address */}\n            <div>\n                <span style={labelStyle}>Messy address</span>\n                <pre style={{ ...preStyle, marginTop: \"0.25rem\" }}>\n                    {messyAddress}\n                </pre>\n            </div>\n\n            {/* Candidate addresses */}\n            <div>\n                <span style={labelStyle}>{candidateLabel}</span>\n                <div\n                    style={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        gap: \"0.4rem\",\n                        marginTop: \"0.25rem\",\n                    }}\n                >\n                    {candidates.map(({ address, isMatch }, idx) => {\n                        const matchColor = \"#16a34a\"; // tailwind green-600\n                        const nonMatchTextColor = \"#7f1d1d\"; // tailwind red-800\n                        // Determine border and text color only if isMatch is explicitly true/false\n                        let borderStyle = \"1px solid transparent\";\n                        let textColor = undefined;\n                        let tick = \"\";\n                        let tickColor = undefined;\n                        if (isMatch === true) {\n                            borderStyle = `1px solid ${matchColor}`;\n                            tick = \"✅\";\n                            tickColor = matchColor;\n                        } else if (isMatch === false) {\n                            // No border, but red text for non-match\n                            textColor = nonMatchTextColor;\n                            tick = \"\";\n                            tickColor = nonMatchTextColor;\n                        }\n                        // If isMatch is undefined, no special formatting\n                        return (\n                            <div\n                                key={idx}\n                                style={{\n                                    display: \"flex\",\n                                    flexDirection: \"row\",\n                                    alignItems: \"stretch\",\n                                }}\n                            >\n                                {/* Numbering at the leftmost edge */}\n                                <span\n                                    style={{\n                                        fontFamily: \"inherit\",\n                                        fontWeight: 500,\n                                        fontSize: \"0.85rem\",\n                                        color: \"#6b7280\", // tailwind slate-500\n                                        minWidth: \"1.5rem\",\n                                        textAlign: \"right\",\n                                        marginRight: \"0.0rem\",\n                                        userSelect: \"none\",\n                                        display: \"flex\",\n                                        alignItems: \"flex-start\",\n                                        paddingTop: \"0.25rem\",\n                                    }}\n                                >\n                                    {idx + 1}.\n                                </span>\n                                <div\n                                    style={{\n                                        display: \"flex\",\n                                        flex: 1,\n                                        alignItems: \"center\",\n                                        gap: \"0.6rem\",\n                                        border: borderStyle,\n                                        borderRadius: \"0.25rem\",\n                                        padding: \"0.25rem\",\n                                    }}\n                                >\n                                    <pre\n                                        style={{\n                                            ...preStyle,\n                                            margin: 0,\n                                            color: textColor,\n                                        }}\n                                    >\n                                        {address}\n                                    </pre>\n                                    {/* Tick only for the match */}\n                                    <span\n                                        style={{\n                                            fontSize: \"1.1rem\",\n                                            lineHeight: 1,\n                                            color: tickColor,\n                                            userSelect: \"none\",\n                                            width: \"1.25rem\",\n                                            textAlign: \"center\",\n                                        }}\n                                    >\n                                        {tick}\n                                    </span>\n                                </div>\n                            </div>\n                        );\n                    })}\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\n\n/**\n * Compact component that compares two addresses, allowing portions of each\n * address to be arbitrary JSX (e.g. <mark>…</mark>).\n *\n * @param {{ addressA: React.ReactNode; addressB: React.ReactNode; isMatch: boolean }} props\n */\nexport default function AddressComparison({ addressA, addressB, isMatch }) {\n    const colour = isMatch ? \"#16a34a\" : \"#dc2626\";\n    const word = isMatch ? \"match\" : \"non-match\";\n    const icon = isMatch ? \"✅\" : \"❌\";\n\n    const preStyle = {\n        margin: 0,\n        padding: \"0.25rem\",\n        background: \"#f3f4f6\",\n        borderRadius: \"0.25rem\",\n        fontFamily: \"monospace\",\n        fontSize: \"0.85rem\",\n        whiteSpace: \"pre-wrap\",\n        lineHeight: 1.3,\n    };\n\n\n\n    return (\n        <div\n            style={{\n                border: `1px solid ${colour}`,\n                borderRadius: \"0.25rem\",\n                padding: \"0.5rem\",\n                display: \"flex\",\n                alignItems: \"center\",\n                gap: \"0.75rem\",\n                maxWidth: \"40rem\",\n            }}\n        >\n            {/* address column */}\n            <div style={{ flex: 1 }}>\n                <pre style={preStyle}>{addressA}</pre>\n                <pre style={{ ...preStyle, marginTop: \"0.35rem\" }}>\n                    {addressB}\n                </pre>\n            </div>\n\n            {/* indicator column */}\n            <div\n                style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    alignItems: \"center\",\n                    color: colour,\n                    fontWeight: 700,\n                    fontSize: \"0.8rem\",\n                    userSelect: \"none\",\n                    minWidth: \"4.5rem\",\n                }}\n            >\n                <span style={{ fontSize: \"1.4rem\", lineHeight: 1 }}>{icon}</span>\n                {word}\n            </div>\n        </div>\n    );\n}\n"],"names":["Head","props","React","SEO","frontmatter","pageContext","_createMdxContent","_components","Object","assign","h1","h2","p","sup","a","mark","ul","li","code","h3","table","thead","tr","th","tbody","td","ol","em","strong","section","_provideComponents","components","Subtitle","href","id","AddressComparison","addressA","addressB","isMatch","Link","to","style","marginLeft","verticalAlign","title","width","height","viewBox","d","fill","display","textAlign","background","border","padding","borderRadius","margin","fontWeight","AddressCandidatesComparison","messyAddress","candidates","address","xmlns","cx","cy","r","x","y","className","MDXLayout","_ref","defaultTitle","description","defaultDescription","image","siteUrl","twitterUsername","useStaticQuery","site","siteMetadata","seo","url","pathname","stylesheetLink","stylesheet","name","content","rel","type","children","newChildren","map","child","preStyle","fontFamily","fontSize","whiteSpace","lineHeight","labelStyle","color","letterSpacing","candidateLabel","length","maxWidth","flexDirection","gap","marginBottom","marginTop","_ref2","idx","matchColor","nonMatchTextColor","textColor","tickColor","borderStyle","tick","key","alignItems","minWidth","marginRight","userSelect","paddingTop","flex","colour","word","icon"],"sourceRoot":""}