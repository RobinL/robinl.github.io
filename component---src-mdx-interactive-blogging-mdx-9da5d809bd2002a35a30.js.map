{"version":3,"file":"component---src-mdx-interactive-blogging-mdx-9da5d809bd2002a35a30.js","mappings":"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","sources":["webpack://robinlinacre/./node_modules/@robinl/interactive-blogging-with-observable-notebooks-and-gatsb/30c5bf135cab7285@518.js","webpack://robinlinacre/./src/mdx/interactive_blogging.mdx","webpack://robinlinacre/./src/components/ObservableNotebook.jsx","webpack://robinlinacre/./src/hooks/use-site-metadata.jsx","webpack://robinlinacre/./src/components/SEO.jsx"],"sourcesContent":["// https://observablehq.com/@robinl/interactive-blogging-with-observable-notebooks-and-gatsb@518\nfunction _1(md){return(\nmd`# Interactive blogging with Observable Notebooks and gatsby.js`\n)}\n\nasync function* _message(Promises,html,d3)\n{\n  let i = 0;\n  const text = \"Interactive blogging with Observable Notebooks and gatsby.js\";\n  let message;\n\n  while (i < text.length) {\n    await Promises.delay(40);\n    let span = html`<span>${text.substr(i, 1)}</span>`;\n    span.style.color = d3.interpolateViridis(i / text.length);\n\n    span.setAttribute(\"value\", i);\n    span.setAttribute(\"ascending\", \"ascending\");\n    if (i == 0) {\n      message = html`<span>${span}`;\n    } else {\n      message = html`${message.innerHTML}${span}`;\n    }\n    i = i + 1;\n    yield html`<h1>${message}</h1>`;\n  }\n\n  while (i >= text.length) {\n    await Promises.delay(100);\n    let current_message = html`<h1>${message}</h1>`;\n\n    let current_spans = current_message.firstChild.children;\n\n    for (let span of current_spans) {\n      let v = +span.getAttribute(\"value\");\n\n      if ((v == text.length) | (v == -1)) {\n        span.toggleAttribute(\"ascending\");\n      }\n\n      \n\n      span.hasAttribute(\"ascending\") ? v-- : v++;\n      span.setAttribute(\"value\", v);\n      span.style.color = d3.interpolateViridis(v / text.length);\n      // span.style.fontSize = Math.sin(v / 10) + 20 + \"px\";\n    }\n    i = i + 1;\n    \n\n\n    yield current_message;\n  }\n}\n\n\nfunction _md1(md){return(\nmd`This website contains a variety of interactive content like my [energy usage calculator](https://robinl.github.io/robinlinacre/energy-usage) which I can create easily and host for free.  In this post I explain how the it all works.\n\n## Observable notebooks\n\nI use [Observable Notebooks](https://observablehq.com) as the authoring environment for interactive content.  This is my favourite programming environment because it allows me to [maximise the time I spend on the fun part of programming](https://observablehq.com/@tmcw/why-observable-for-people-who-already-have-a-text-editor).\n\nThis allows readers to not only view the code behind each page ([including this one!](https://observablehq.com/@robinl/interactive-blogging-with-observable-notebooks-and-gatsb)), but also to live-edit it and fork it.  On the [Observable Notebooks](https://observablehq.com) homepage, you can see that the ability to reuse, re-mix and iterate leads to an amazing amount of creativity.\n\nI then use [gatsby.js](gatsbyjs.org) to build my notebooks into a website.  \n\nThe idea is that you end up with the best of all worlds:  A fun, simple authoring environment with unlimited power for interactivity, which can be hosted for free on a static web host like Github pages.\n\nWhat follows are a few notes about how I got everything working.  If you'd rather jump straight into the code, you can find a minimal, working template [here](https://github.com/robinl/gasby_observable_blog/), and the code for my blog is [here](https://github.com/robinl/robinlinacre).\n`\n)}\n\nfunction _md2(md){return(\nmd`## Gastby.js as a site generator\n\nGatsby js is a modern website generator that uses the React framework.  Javascript modules can be installed as dependencies, and used within pages on your website.  \n\nThis is a good fit because each Observable notebook can be compiled and downloaded as a JavaScript module - see [here](https://observablehq.com/@observablehq/downloading-and-embedding-notebooks) - and so can be installed and made available as a part of a Gatsby site.`\n)}\n\nfunction _md3(md){return(\nmd`## Rendering notebooks in gatsby\n\nI use a React component to display each Observable notebook within a div - see [here](https://github.com/RobinL/gasby_observable_blog/blob/dev/src/components/observable_div.jsx) for the implementation.  \n\nI then have an [page component](https://github.com/RobinL/gasby_observable_blog/blob/dev/src/components/obs_page.js) that serves as a default layout for each page on my website which contains a notebook.  \n\nEach notebook is a standard gatsby page which imports the Observable notebook, and then passes it to the page component.  [Here's](https://github.com/RobinL/gasby_observable_blog/blob/dev/src/pages/gatsby-test-2.js) an example.   \\`output_order\\` allows the author to control which cells are displayed and in what order.\n\nFor a long time I experimented with the idea of loading all notebooks from a json file, and then using createPage (e.g. like  [this](https://github.com/RobinL/gasby_observable_blog/blob/14537c158c2c729cb985a56c5acc5d292c958379/gatsby-node.js#L25) to create the pages,  rather than needing a separate \\`jsx\\` page for each notebook.  The json would look like this:\n\n\\`\\`\\`json\n[\n    {   \"page_path\": \"page1\",\n        \"observable_note_name\": \"gatsby-test\"\n    },\n    {   \n        \"page_path\": \"page2\",\n        \"observable_note_name\": \"gatsby-test-2\",\n        \"output_order\": [\"cell1\", \"cell2\"]\n    }\n]\n\\`\\`\\`\n\nI now don't think this is possible, because of the way webpack works.  See [here](https://stackoverflow.com/questions/58011164/dynamic-module-import-in-component-for-gatsby-js-site).\n\n`\n)}\n\nfunction _md4(md){return(\nmd`## Continuous deployment\n\nI use Github actions for continuous deployment.  Specifically, any commits merged into dev trigger a workflow which builds the site, and pushes it to master, thus making it available as a github page.\n\nYou can see the action [here](https://github.com/RobinL/gasby_observable_blog/blob/dev/.github/workflows/main.yml).  Note you will need to generate a secret containing a [Github PAT](https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line) and add it to your repo's secrets.  The enables the workflow to commit code back to your repo.\n`\n)}\n\nfunction _md5(md){return(\nmd`## Authoring workflow\n\nOnce all this is set up, the authoring process is very simple:\n\n**Step 1 - author your notebook and get the link**\n\nWrite an observable notebook, and publish it. Click the 'download code' button to get a link to the javascript module.  In the case of [this post](https://observablehq.com/@robinl/interactive-blogging-with-observable-notebooks-and-gatsb), the link to the code is \\`https://api.observablehq.com/@robinl/interactive-blogging-with-observable-notebooks-and-gatsb.tgz?v=3\\`.  \n\n**Step 2 - yarn add the notebook to gatsby**\n\nIn your gatsby website, install the notebook using \n\n\\`\\`\\`sh\nyarn add https://api.observablehq.com/@robinl/interactive-blogging-with-observable-notebooks-and-gatsb.tgz?v=3\n\\`\\`\\`\n\n**Step 3 - create a new page**\n\nCreate a new page in your gatsby \\`src/pages/\\` directory called, say \\`interactive_blogging.jsx\\`.\n\nAdd the following boilerplate:\n\n\\`\\`\\`js\nimport define from \"@robinl/interactive-blogging-with-observable-notebooks-and-gatsb\"\nimport ObservablePage from \"../components/obs_page\"\n\nexport default ({ data }) => (\n    ObservablePage(define)\n)\n\\`\\`\\`\n\n\nThat's it!\n\nTo update a page is even easier - you just retrieve the version number of the notebook from 'history' page with the Observable notebook, and manually update the \\`yarn.lock\\` file with the new version number. See [here](https://github.com/RobinL/robinlinacre/commit/ad9255cc57cecfeaf3a93f6b8c9707abad558686) for an example.\n\n\nYou can find an example of all the code you need to add a page [here](https://github.com/RobinL/robinlinacre/pull/19), which is the pull request that created the page you're reading right now!\n\n`\n)}\n\nfunction _md6(md){return(\nmd`## mdx\n\nAnother good option within the gatsby ecosystem for authoring interactive pages is mdx.  This is an excellent choice if you want to, for instance, write a blog post in markdown [like this](https://robinl.github.io/robinlinacre/my_mdx_page) but add a vega lite chart.\n\nYou can find an example of a component that renders mdx [here](https://github.com/RobinL/robinlinacre/blob/c375c64428bad3021c90594e5d976dc31080de83/src/pages/my_mdx_page.jsx#L1), an \\`mdx\\` page that includes a vega lite chart [here](https://github.com/RobinL/robinlinacre/blob/c375c64428bad3021c90594e5d976dc31080de83/src/mdx/first_post.mdx) and a pull request that adds code syntax highlighting for these pages [here](https://github.com/RobinL/robinlinacre/pull/18/files).\n\n`\n)}\n\nfunction _d3(require){return(\nrequire(\"d3\")\n)}\n\nexport default function define(runtime, observer) {\n  const main = runtime.module();\n  main.variable(observer()).define([\"md\"], _1);\n  main.variable(observer(\"message\")).define(\"message\", [\"Promises\",\"html\",\"d3\"], _message);\n  main.variable(observer(\"md1\")).define(\"md1\", [\"md\"], _md1);\n  main.variable(observer(\"md2\")).define(\"md2\", [\"md\"], _md2);\n  main.variable(observer(\"md3\")).define(\"md3\", [\"md\"], _md3);\n  main.variable(observer(\"md4\")).define(\"md4\", [\"md\"], _md4);\n  main.variable(observer(\"md5\")).define(\"md5\", [\"md\"], _md5);\n  main.variable(observer(\"md6\")).define(\"md6\", [\"md\"], _md6);\n  main.variable(observer(\"d3\")).define(\"d3\", [\"require\"], _d3);\n  return main;\n}\n","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport React from \"react\";\nimport {MDXLayout} from \"../components/MDXLayout\";\nimport {SEO} from \"../components/SEO\";\nexport const Head = props => React.createElement(SEO, {\n  frontmatter: props.pageContext.frontmatter\n});\nimport notebook from '@robinl/interactive-blogging-with-observable-notebooks-and-gatsb';\nimport ObservableNotebook from '../components/ObservableNotebook';\nexport const output_order = ['message', 'md1', 'md2', 'md3', 'md4', 'md5', 'md6'];\nfunction _createMdxContent(props) {\n  return React.createElement(ObservableNotebook, {\n    notebook: notebook,\n    cells: output_order\n  });\n}\nfunction MDXContent(props = {}) {\n  return React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props));\n}\nexport default MDXContent;\n","import React, { useRef, useEffect } from 'react';\nimport { Runtime, Inspector, Library } from '@observablehq/runtime';\n\nconst mountId = 'mdx-container-div';\n\nconst stdlib = new Library();\n\nconst library = Object.assign({}, stdlib, { width: width_mdx });\n\nfunction width_mdx() {\n    return stdlib.Generators.observe(notify => {\n        let width1 = notify(document.getElementById(mountId).clientWidth);\n        function resized() {\n            let width2 = document.getElementById(mountId).clientWidth;\n            if (width2 !== width1) notify((width1 = width2));\n        }\n\n        window.addEventListener('resize', resized);\n        return () => window.removeEventListener('resize', resized);\n    });\n}\n\nfunction ObservableNotebook({ notebook, cells, customClassName }) {\n    const refs = useRef(cells.map(() => React.createRef()));\n\n    useEffect(() => {\n        const runtime = new Runtime(library);\n        runtime.module(notebook, name => {\n            const index = cells.indexOf(name);\n            if (index !== -1) {\n                return new Inspector(refs.current[index].current);\n            }\n        });\n        return () => runtime.dispose();\n    }, [notebook, cells]);\n\n    return (\n        <div className={customClassName}>\n            {refs.current.map((ref, index) => (\n                <div key={index} ref={ref} />\n            ))}\n        </div>\n    );\n}\n\nexport default ObservableNotebook;\n","import { graphql, useStaticQuery } from 'gatsby';\n\nexport const useSiteMetadata = () => {\n    const data = useStaticQuery(graphql`\n        query {\n            site {\n                siteMetadata {\n                    title\n                    description\n                    twitterUsername\n                    image\n                    siteUrl\n                }\n            }\n        }\n    `);\n\n    return data.site.siteMetadata;\n};\n","import React from 'react';\nimport { useSiteMetadata } from '../hooks/use-site-metadata';\n\nexport const SEO = ({ frontmatter }) => {\n    const {\n        title: defaultTitle,\n        description: defaultDescription,\n        image,\n        siteUrl,\n        twitterUsername,\n    } = useSiteMetadata();\n\n    const seo = {\n        title: frontmatter?.title || defaultTitle,\n        description: frontmatter?.description || defaultDescription,\n        image: `${siteUrl}${frontmatter?.image || image}`,\n        url: `${siteUrl}${frontmatter?.pathname || ``}`,\n        twitterUsername,\n        ...frontmatter,\n    };\n\n    const stylesheetLink = frontmatter?.stylesheet;\n\n    return (\n        <>\n            <title>{seo.title}</title>\n            <meta name=\"description\" content={seo.description} />\n            <meta name=\"image\" content={seo.image} />\n            {stylesheetLink && (\n                <link\n                    rel=\"stylesheet\"\n                    type=\"text/css\"\n                    href={`/styles/${stylesheetLink}`}\n                />\n            )}\n        </>\n    );\n};\n"],"names":["_1","md","async","_message","Promises","html","d3","i","text","message","delay","span","substr","style","color","interpolateViridis","setAttribute","innerHTML","current_message","current_spans","firstChild","children","v","getAttribute","toggleAttribute","hasAttribute","_md1","_md2","_md3","_md4","_md5","_md6","_d3","require","runtime","observer","main","module","variable","define","Head","props","React","SEO","frontmatter","pageContext","output_order","_createMdxContent","ObservableNotebook","notebook","cells","MDXLayout","mountId","stdlib","Library","library","Object","assign","width","Generators","observe","notify","width1","document","getElementById","clientWidth","resized","width2","window","addEventListener","removeEventListener","_ref","customClassName","refs","useRef","map","useEffect","Runtime","name","index","indexOf","Inspector","current","dispose","className","ref","key","title","defaultTitle","description","defaultDescription","image","siteUrl","twitterUsername","useStaticQuery","site","siteMetadata","seo","url","pathname","stylesheetLink","stylesheet","content","rel","type","href"],"sourceRoot":""}